/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,20],$V2=[1,24],$V3=[1,25],$V4=[1,26],$V5=[1,36],$V6=[1,37],$V7=[1,35],$V8=[1,28],$V9=[1,43],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[1,38],$Vh=[1,42],$Vi=[1,39],$Vj=[1,44],$Vk=[1,40],$Vl=[1,41],$Vm=[2,5,23,27,28,29,31,39,40,46,48,53,56,60,68,71,72,73,75,76,77,78,80,81,82,83],$Vn=[1,75],$Vo=[1,76],$Vp=[1,83],$Vq=[1,91],$Vr=[1,77],$Vs=[1,78],$Vt=[1,79],$Vu=[1,80],$Vv=[1,81],$Vw=[1,82],$Vx=[1,84],$Vy=[1,85],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,92],$VF=[1,115],$VG=[1,114],$VH=[1,119],$VI=[1,127],$VJ=[1,124],$VK=[1,122],$VL=[1,123],$VM=[1,125],$VN=[1,126],$VO=[1,128],$VP=[1,129],$VQ=[1,130],$VR=[1,131],$VS=[1,132],$VT=[1,133],$VU=[1,134],$VV=[8,35,37,42,43,45,51,67,74,77,85,104,105,106,107,108,109,110,111,112,113,114],$VW=[8,37,42],$VX=[1,159],$VY=[1,160],$VZ=[1,161],$V_=[1,162],$V$=[1,163],$V01=[8,37],$V11=[8,37,42,43,51,67,74,77,85,113,114],$V21=[1,202],$V31=[1,210],$V41=[2,33],$V51=[8,35,36,37,51,67,77],$V61=[37,51],$V71=[8,35,37,42,43,51,67,74,77,85,104,105,108,109,110,111,112,113,114],$V81=[8,35,37,42,43,51,67,74,77,85,108,113,114],$V91=[8,35,37,42,43,51,67,74,77,85,108,109,110,111,112,113,114],$Va1=[1,236],$Vb1=[1,240],$Vc1=[37,51,67,77],$Vd1=[37,43];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"CREATETABLE":7,"TK_semicolon":8,"ALTERTAB":9,"DROPTAB":10,"INSERTREG":11,"UPDATETAB":12,"TRUNCATETAB":13,"DELETETAB":14,"SELECT":15,"DECLAREID":16,"ASIGNID":17,"IFSTRUCT":18,"CASESTRUCT_S":19,"WHILESTRUCT":20,"FORSTRUCT":21,"FUNCDEC":22,"METODDEC":23,"ENCAP":24,"CALLFUNC":25,"PRINT":26,"RW_break":27,"RW_continue":28,"RW_return":29,"EXP":30,"RW_declare":31,"DECLIDS":32,"TK_id":33,"TYPE":34,"TK_equal":35,"RW_default":36,"TK_comma":37,"DECLID":38,"RW_set":39,"RW_select":40,"FIELDS":41,"RW_from":42,"RW_where":43,"LIST_IDS":44,"TK_mult":45,"RW_create":46,"RW_table":47,"TK_field":48,"TK_lpar":49,"ATTRIBUTES":50,"TK_rpar":51,"ATTRIBUTE":52,"RW_alter":53,"ACTION":54,"RW_add":55,"RW_drop":56,"RW_column":57,"RW_rename":58,"RW_to":59,"RW_insert":60,"RW_into":61,"LIST_ATTRIBS":62,"RW_values":63,"LIST_EXPS":64,"SELECTREG":65,"IDS":66,"RW_as":67,"RW_update":68,"VALUESTAB":69,"VALUETAB":70,"RW_truncate":71,"RW_delete":72,"RW_if":73,"RW_then":74,"RW_else":75,"RW_end":76,"RW_begin":77,"RW_case":78,"ENVCASE_S":79,"RW_when":80,"RW_print":81,"RW_while":82,"RW_for":83,"RW_in":84,"TK_dot":85,"RW_loop":86,"RW_function":87,"PARAMS":88,"RW_returns":89,"RW_procedure":90,"PARAM":91,"ARGS":92,"ARITHMETICS":93,"RELATIONALS":94,"LOGICS":95,"CAST":96,"NATIVEFUC":97,"TK_varchar":98,"TK_int":99,"TK_double":100,"TK_date":101,"RW_true":102,"RW_false":103,"TK_plus":104,"TK_minus":105,"TK_div":106,"TK_mod":107,"TK_notequal":108,"TK_lessequal":109,"TK_greatequal":110,"TK_less":111,"TK_great":112,"RW_and":113,"RW_or":114,"RW_not":115,"RW_cast":116,"RW_lower":117,"RW_upper":118,"RW_round":119,"RW_len":120,"RW_typeof":121,"RW_int":122,"RW_double":123,"RW_date":124,"RW_varchar":125,"RW_boolean":126,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"TK_semicolon",23:"METODDEC",27:"RW_break",28:"RW_continue",29:"RW_return",31:"RW_declare",33:"TK_id",35:"TK_equal",36:"RW_default",37:"TK_comma",39:"RW_set",40:"RW_select",42:"RW_from",43:"RW_where",45:"TK_mult",46:"RW_create",47:"RW_table",48:"TK_field",49:"TK_lpar",51:"TK_rpar",53:"RW_alter",55:"RW_add",56:"RW_drop",57:"RW_column",58:"RW_rename",59:"RW_to",60:"RW_insert",61:"RW_into",63:"RW_values",67:"RW_as",68:"RW_update",71:"RW_truncate",72:"RW_delete",73:"RW_if",74:"RW_then",75:"RW_else",76:"RW_end",77:"RW_begin",78:"RW_case",80:"RW_when",81:"RW_print",82:"RW_while",83:"RW_for",84:"RW_in",85:"TK_dot",86:"RW_loop",87:"RW_function",89:"RW_returns",90:"RW_procedure",98:"TK_varchar",99:"TK_int",100:"TK_double",101:"TK_date",102:"RW_true",103:"RW_false",104:"TK_plus",105:"TK_minus",106:"TK_div",107:"TK_mod",108:"TK_notequal",109:"TK_lessequal",110:"TK_greatequal",111:"TK_less",112:"TK_great",113:"RW_and",114:"RW_or",115:"RW_not",116:"RW_cast",117:"RW_lower",118:"RW_upper",119:"RW_round",120:"RW_len",121:"RW_typeof",122:"RW_int",123:"RW_double",124:"RW_date",125:"RW_varchar",126:"RW_boolean"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,3],[6,1],[16,2],[16,5],[16,5],[32,3],[32,1],[38,2],[17,4],[15,6],[15,4],[15,2],[41,1],[41,1],[7,6],[50,3],[50,1],[52,2],[9,4],[54,3],[54,3],[54,3],[54,5],[10,3],[11,10],[62,3],[62,1],[64,3],[64,1],[65,6],[65,4],[65,4],[44,3],[44,1],[66,3],[66,1],[12,8],[69,3],[69,1],[70,3],[13,3],[14,5],[18,8],[18,6],[18,5],[19,6],[19,4],[19,3],[79,5],[79,4],[79,2],[26,2],[20,3],[21,8],[22,9],[22,6],[22,5],[88,3],[88,1],[91,2],[24,3],[25,4],[25,3],[92,3],[92,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,3],[93,3],[93,3],[93,3],[93,3],[93,3],[93,2],[94,3],[94,3],[94,3],[94,3],[94,3],[94,3],[95,3],[95,3],[95,2],[96,6],[97,4],[97,4],[97,6],[97,4],[97,6],[97,4],[34,1],[34,1],[34,1],[34,1],[34,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
return []
break;
case 3: case 51: case 53: case 58: case 83: case 89:
this.$.push($$[$0])
break;
case 4: case 52: case 54: case 59: case 84: case 90:
this.$ = [$$[$0]]  
break;
case 5: case 7: case 8: case 10: case 13: case 14: case 15: case 16: case 17: case 18: case 21: case 23: case 105:
this.$ = $$[$0-1]
break;
case 24:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column)   
break;
case 25:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 26:
this.$ = new Return(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1])
break;
case 27:
errors.push(new Error(this._$.first_line, this._$.first_column + 1, TypeError.SYNTAX, `No se esperaba «${yytext}»`))
break;
case 28:
this.$ = new InitID(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0][0], $$[$0][1], undefined)
break;
case 29: case 30:
this.$ = new InitID(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0-2], $$[$0])             
break;
case 31: case 41:
this.$[0].push($$[$0][0]); this.$[1].push($$[$0][1])
break;
case 32:
this.$ = [[$$[$0][0]], [$$[$0][1]]]             
break;
case 33: case 43:
this.$ = [$$[$0-1], $$[$0]]
break;
case 34:
this.$ = new AsignID(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0])
break;
case 40:
this.$ = new CreateTable(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1][0], $$[$0-1][1])
break;
case 42:
this.$ = [[$$[$0][0]], [$$[$0][1]]]                 
break;
case 49:
this.$ = new DropTable(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0])
break;
case 50:
this.$ = new InsertTable(_$[$0-9].first_line, _$[$0-9].first_column, $$[$0-7], $$[$0-5], $$[$0-1])
break;
case 60:
this.$ = [$$[$0-2], $$[$0]]
break;
case 61:
this.$ = [$$[$0], $$[$0]]
break;
case 66:
this.$ = new TruncateTable(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0])
break;
case 68:
this.$ = new If(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], new Block(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-4]), new Block(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-2]))
break;
case 69:
this.$ = new If(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], new Block(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-2]), undefined)
break;
case 70:
this.$ = new If(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], new Block(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]), undefined)
break;
case 71:
this.$ = new Case(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], $$[$0-3], undefined, $$[$0-1])
break;
case 72:
/*this.$ = new Case(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0-1], undefined)*/
break;
case 73:
/*this.$ = new Case(_$[$0-2].first_line, _$[$0-2].first_column, undefined, $$[$0-1], undefined)*/
break;
case 74:
this.$ = new When(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], new Block(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]))
break;
case 75:
this.$ = new When(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], new Block(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0]))
break;
case 76:
this.$ = new Block(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0])
break;
case 77:
this.$ = new Print(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0])
break;
case 78:
this.$ = new While(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], $$[$0])
break;
case 79:
this.$ = new For(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], $$[$0-4], $$[$0-2], $$[$0-1])
break;
case 80:
this.$ = new Function(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-4], $$[$0], $$[$0-1])
break;
case 85:
this.$ = new Parameter(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$0])
break;
case 86:
this.$ = new Block(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1])
break;
case 87:
this.$ = new CallFunction(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], $$[$0-1])
break;
case 88:
this.$ = new CallFunction(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], [])
break;
case 91: case 92: case 93: case 94: case 95: case 96:
this.$ = $$[$0]
break;
case 97:
this.$ = new AccessID(_$[$0].first_line, _$[$0].first_column, $$[$0])
break;
case 99:
this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.VARCHAR)
break;
case 100:
this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.INT)    
break;
case 101:
this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.DOUBLE) 
break;
case 102:
this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.DATE)   
break;
case 103: case 104:
this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.BOOLEAN)
break;
case 106: case 107: case 108: case 109: case 110:
this.$ = new Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 111:
this.$ = new Arithmetic(_$[$0-1].first_line, _$[$0-1].first_column, undefined, $$[$0-1], $$[$0])
break;
case 112: case 113: case 114: case 115: case 116: case 117:
this.$ = new Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 118: case 119:
this.$ = new Logic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 120:
this.$ = new Logic(_$[$0-1].first_line, _$[$0-1].first_column, undefined, $$[$0-1], $$[$0])
break;
case 121:
this.$ = new Cast(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1])
break;
case 122:
this.$ = new Lower(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1])
break;
case 123:
this.$ = new Upper(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1])
break;
case 124:
this.$ = new Round(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1])
break;
case 125:
this.$ = new Len(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1])
break;
case 126:
this.$ = new Truncate(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1])
break;
case 127:
this.$ = new TypeOf(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1])
break;
case 128:
this.$ = Type.INT    
break;
case 129:
this.$ = Type.DOUBLE 
break;
case 130:
this.$ = Type.DATE   
break;
case 131:
this.$ = Type.VARCHAR
break;
case 132:
this.$ = Type.BOOLEAN
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:21,25:22,26:23,27:$V2,28:$V3,29:$V4,31:$V5,39:$V6,40:$V7,46:$V8,48:$V9,53:$Va,56:$Vb,60:$Vc,68:$Vd,71:$Ve,72:$Vf,73:$Vg,77:$Vh,78:$Vi,81:$Vj,82:$Vk,83:$Vl},{1:[3]},{2:$V0,5:[1,45],6:46,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:21,25:22,26:23,27:$V2,28:$V3,29:$V4,31:$V5,39:$V6,40:$V7,46:$V8,48:$V9,53:$Va,56:$Vb,60:$Vc,68:$Vd,71:$Ve,72:$Vf,73:$Vg,77:$Vh,78:$Vi,81:$Vj,82:$Vk,83:$Vl},{1:[2,2]},o($Vm,[2,4]),{8:[1,47]},{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51]},{8:[1,52]},{8:[1,53]},{8:[1,54]},{8:[1,55]},{8:[1,56]},{8:[1,57]},{8:[1,58]},{8:[1,59]},{8:[1,60]},{8:[1,61]},{8:[1,62]},{8:[1,63]},{8:[1,64]},{8:[1,65]},{8:[1,66]},{8:[1,67]},{25:74,30:68,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},o($Vm,[2,27]),{47:[1,93],87:[1,94],90:[1,95]},{47:[1,96]},{47:[1,97]},{61:[1,98]},{33:[1,99]},{47:[1,100]},{42:[1,101]},{25:74,30:106,33:$Vn,41:102,44:103,45:[1,104],48:$Vo,49:$Vp,66:105,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{32:107,33:[1,108],38:109},{33:[1,110]},{25:74,30:111,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{33:[1,112],75:$VF,79:113,80:$VG},{25:74,30:116,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{33:[1,117]},{2:$V0,4:118,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:21,25:22,26:23,27:$V2,28:$V3,29:$V4,31:$V5,39:$V6,40:$V7,46:$V8,48:$V9,53:$Va,56:$Vb,60:$Vc,68:$Vd,71:$Ve,72:$Vf,73:$Vg,77:$Vh,78:$Vi,81:$Vj,82:$Vk,83:$Vl},{49:$VH},{25:74,30:120,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{1:[2,1]},o($Vm,[2,3]),o($Vm,[2,5]),o($Vm,[2,6]),o($Vm,[2,7]),o($Vm,[2,8]),o($Vm,[2,9]),o($Vm,[2,10]),o($Vm,[2,11]),o($Vm,[2,12]),o($Vm,[2,13]),o($Vm,[2,14]),o($Vm,[2,15]),o($Vm,[2,16]),o($Vm,[2,17]),o($Vm,[2,18]),o($Vm,[2,19]),o($Vm,[2,20]),o($Vm,[2,21]),o($Vm,[2,22]),o($Vm,[2,23]),o($Vm,[2,24]),o($Vm,[2,25]),{8:[1,121],35:$VI,45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},o($VV,[2,91]),o($VV,[2,92]),o($VV,[2,93]),o($VV,[2,94]),o($VV,[2,95]),o($VV,[2,96]),o($VV,[2,97]),o($VV,[2,98],{49:$VH}),o($VV,[2,99]),o($VV,[2,100]),o($VV,[2,101]),o($VV,[2,102]),o($VV,[2,103]),o($VV,[2,104]),{25:74,30:135,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:136,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:137,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{49:[1,138]},{49:[1,139]},{49:[1,140]},{49:[1,141]},{49:[1,142]},{49:[1,143]},{49:[1,144]},{48:[1,145]},{48:[1,146]},{33:[1,147]},{33:[1,148]},{48:[1,149]},{48:[1,150]},{39:[1,151]},{33:[1,152]},{33:[1,153]},{42:[1,154]},{8:[2,37],37:[1,155],42:[2,38]},{42:[2,39]},o($VW,[2,59]),o($VW,[2,61],{35:$VI,45:$VJ,67:[1,156],104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU}),{8:[2,28],37:[1,157]},{34:158,122:$VX,123:$VY,124:$VZ,125:$V_,126:$V$},o($V01,[2,32]),{35:[1,164]},{35:$VI,45:$VJ,74:[1,165],77:[1,166],104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{75:$VF,79:167,80:$VG},{76:[1,168]},{25:74,30:169,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{2:$V0,4:170,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:21,25:22,26:23,27:$V2,28:$V3,29:$V4,31:$V5,39:$V6,40:$V7,46:$V8,48:$V9,53:$Va,56:$Vb,60:$Vc,68:$Vd,71:$Ve,72:$Vf,73:$Vg,77:$Vh,78:$Vi,81:$Vj,82:$Vk,83:$Vl},{24:171,35:$VI,45:$VJ,77:$Vh,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{84:[1,172]},{2:$V0,6:46,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:21,25:22,26:23,27:$V2,28:$V3,29:$V4,31:$V5,39:$V6,40:$V7,46:$V8,48:$V9,53:$Va,56:$Vb,60:$Vc,68:$Vd,71:$Ve,72:$Vf,73:$Vg,76:[1,173],77:$Vh,78:$Vi,81:$Vj,82:$Vk,83:$Vl},{25:74,30:176,33:$Vn,48:$Vo,49:$Vp,51:[1,175],71:$Vq,92:174,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{8:[2,77],35:$VI,45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},o($Vm,[2,26]),{25:74,30:177,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:178,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:179,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:180,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:181,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:182,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:183,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:184,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:185,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:186,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:187,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:188,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:189,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{35:$VI,45:$VJ,51:[1,190],104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},o($VV,[2,111]),o($V11,[2,120],{35:$VI,45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS}),{25:74,30:191,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:192,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:193,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:194,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:195,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:196,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:197,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{49:[1,198]},{49:[1,199]},{33:$V21,88:200,91:201},{54:203,55:[1,204],56:[1,205],58:[1,206]},{8:[2,49]},{49:[1,207]},{33:$V31,69:208,70:209},{8:[2,66]},{43:[1,211]},{33:[1,212]},{25:74,30:106,33:$Vn,48:$Vo,49:$Vp,66:213,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{48:[1,214]},{33:[1,216],38:215},o($V01,$V41,{35:[1,217],36:[1,218]}),o($V51,[2,128]),o($V51,[2,129]),o($V51,[2,130]),o($V51,[2,131]),o($V51,[2,132]),{25:74,30:219,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{2:$V0,4:220,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:21,25:22,26:23,27:$V2,28:$V3,29:$V4,31:$V5,39:$V6,40:$V7,46:$V8,48:$V9,53:$Va,56:$Vb,60:$Vc,68:$Vd,71:$Ve,72:$Vf,73:$Vg,77:$Vh,78:$Vi,81:$Vj,82:$Vk,83:$Vl},{2:$V0,4:221,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:21,25:22,26:23,27:$V2,28:$V3,29:$V4,31:$V5,39:$V6,40:$V7,46:$V8,48:$V9,53:$Va,56:$Vb,60:$Vc,68:$Vd,71:$Ve,72:$Vf,73:$Vg,77:$Vh,78:$Vi,81:$Vj,82:$Vk,83:$Vl},{76:[1,222]},{8:[2,73]},{35:$VI,45:$VJ,74:[1,223],104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{2:$V0,6:46,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:21,25:22,26:23,27:$V2,28:$V3,29:$V4,31:$V5,39:$V6,40:$V7,46:$V8,48:$V9,53:$Va,56:$Vb,60:$Vc,68:$Vd,71:$Ve,72:$Vf,73:$Vg,76:[2,76],77:$Vh,78:$Vi,81:$Vj,82:$Vk,83:$Vl},{8:[2,78]},{25:74,30:224,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},o([8,86],[2,86]),{37:[1,226],51:[1,225]},o($VV,[2,88]),o($V61,[2,90],{35:$VI,45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU}),o($V71,[2,106],{45:$VJ,106:$VM,107:$VN}),o($V71,[2,107],{45:$VJ,106:$VM,107:$VN}),o($VV,[2,108]),o($VV,[2,109]),o($VV,[2,110]),o($V81,[2,112],{45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VP,110:$VQ,111:$VR,112:$VS}),o($V81,[2,113],{45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VP,110:$VQ,111:$VR,112:$VS}),o($V91,[2,114],{45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN}),o($V91,[2,115],{45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN}),o($V91,[2,116],{45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN}),o($V91,[2,117],{45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN}),o($V11,[2,118],{35:$VI,45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS}),o([8,37,42,43,51,67,74,77,85,114],[2,119],{35:$VI,45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT}),o($VV,[2,105]),{35:$VI,45:$VJ,67:[1,227],104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{35:$VI,45:$VJ,51:[1,228],104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{35:$VI,45:$VJ,51:[1,229],104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{35:$VI,37:[1,230],45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{35:$VI,45:$VJ,51:[1,231],104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{35:$VI,37:[1,232],45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{35:$VI,45:$VJ,51:[1,233],104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{48:$Va1,50:234,52:235},{33:$V21,88:237,91:201},{24:239,37:$Vb1,67:[1,238],77:$Vh},o($Vc1,[2,84]),{34:241,122:$VX,123:$VY,124:$VZ,125:$V_,126:$V$},{8:[2,44]},{48:[1,242]},{57:[1,243]},{57:[1,245],59:[1,244]},{48:[1,247],62:246},{37:[1,249],43:[1,248]},o($Vd1,[2,64]),{35:[1,250]},{25:74,30:251,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{8:[2,36],43:[1,252]},o($VW,[2,58]),o($VW,[2,60]),o($V01,[2,31]),{34:253,122:$VX,123:$VY,124:$VZ,125:$V_,126:$V$},{25:74,30:254,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{25:74,30:255,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{8:[2,34],35:$VI,45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{2:$V0,6:46,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:21,25:22,26:23,27:$V2,28:$V3,29:$V4,31:$V5,39:$V6,40:$V7,46:$V8,48:$V9,53:$Va,56:$Vb,60:$Vc,68:$Vd,71:$Ve,72:$Vf,73:$Vg,75:[1,256],76:[1,257],77:$Vh,78:$Vi,81:$Vj,82:$Vk,83:$Vl},{2:$V0,6:46,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:21,25:22,26:23,27:$V2,28:$V3,29:$V4,31:$V5,39:$V6,40:$V7,46:$V8,48:$V9,53:$Va,56:$Vb,60:$Vc,68:$Vd,71:$Ve,72:$Vf,73:$Vg,76:[1,258],77:$Vh,78:$Vi,81:$Vj,82:$Vk,83:$Vl},{8:[2,72],67:[1,259]},{2:$V0,4:260,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:21,25:22,26:23,27:$V2,28:$V3,29:$V4,31:$V5,39:$V6,40:$V7,46:$V8,48:$V9,53:$Va,56:$Vb,60:$Vc,68:$Vd,71:$Ve,72:$Vf,73:$Vg,77:$Vh,78:$Vi,81:$Vj,82:$Vk,83:$Vl},{35:$VI,45:$VJ,85:[1,261],104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},o($VV,[2,87]),{25:74,30:262,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{34:263,122:$VX,123:$VY,124:$VZ,125:$V_,126:$V$},o($VV,[2,122]),o($VV,[2,123]),{25:74,30:264,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},o($VV,[2,125]),{25:74,30:265,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},o($VV,[2,127]),{37:[1,267],51:[1,266]},o($V61,[2,42]),{34:268,122:$VX,123:$VY,124:$VZ,125:$V_,126:$V$},{37:$Vb1,51:[1,269]},{24:270,77:$Vh},{8:[2,82]},{33:$V21,91:271},o($Vc1,[2,85]),{34:272,122:$VX,123:$VY,124:$VZ,125:$V_,126:$V$},{48:[1,273]},{48:[1,274]},{48:[1,275]},{37:[1,277],51:[1,276]},o($V61,[2,52]),{33:[1,278]},{33:$V31,70:279},{25:74,30:280,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{8:[2,67],35:$VI,45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{25:74,30:281,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},o($V01,$V41),{8:[2,29],35:$VI,45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{8:[2,30],35:$VI,45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{2:$V0,4:282,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:21,25:22,26:23,27:$V2,28:$V3,29:$V4,31:$V5,39:$V6,40:$V7,46:$V8,48:$V9,53:$Va,56:$Vb,60:$Vc,68:$Vd,71:$Ve,72:$Vf,73:$Vg,77:$Vh,78:$Vi,81:$Vj,82:$Vk,83:$Vl},{73:[1,283]},{8:[2,70]},{48:[1,284]},{2:$V0,6:46,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:21,25:22,26:23,27:$V2,28:$V3,29:$V4,31:$V5,39:$V6,40:$V7,46:$V8,48:$V9,53:$Va,56:$Vb,60:$Vc,68:$Vd,71:$Ve,72:$Vf,73:$Vg,75:$VF,76:[2,75],77:$Vh,78:$Vi,79:285,80:$VG,81:$Vj,82:$Vk,83:$Vl},{25:74,30:286,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},o($V61,[2,89],{35:$VI,45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU}),{51:[1,287]},{35:$VI,45:$VJ,51:[1,288],104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{35:$VI,45:$VJ,51:[1,289],104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{8:[2,40]},{48:$Va1,52:290},o($V61,[2,43]),{89:[1,291]},{8:[2,81]},o($Vc1,[2,83]),{8:[2,45]},{8:[2,46]},{8:[2,47]},{59:[1,292]},{63:[1,293]},{48:[1,294]},{35:[1,295]},o($Vd1,[2,63]),o($Vd1,[2,65],{35:$VI,45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU}),{8:[2,35],35:$VI,45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{2:$V0,6:46,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:21,25:22,26:23,27:$V2,28:$V3,29:$V4,31:$V5,39:$V6,40:$V7,46:$V8,48:$V9,53:$Va,56:$Vb,60:$Vc,68:$Vd,71:$Ve,72:$Vf,73:$Vg,76:[1,296],77:$Vh,78:$Vi,81:$Vj,82:$Vk,83:$Vl},{8:[2,69]},{8:[2,71]},{76:[2,74]},{24:297,35:$VI,45:$VJ,77:$Vh,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},o($VV,[2,121]),o($VV,[2,124]),o($VV,[2,126]),o($V61,[2,41]),{34:298,122:$VX,123:$VY,124:$VZ,125:$V_,126:$V$},{48:[1,299]},{49:[1,300]},o($V61,[2,51]),{25:74,30:301,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{73:[1,302]},{86:[1,303]},{24:304,77:$Vh},{8:[2,48]},{25:74,30:306,33:$Vn,48:$Vo,49:$Vp,64:305,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},{8:[2,62],35:$VI,45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU},{8:[2,68]},{8:[2,79]},{8:[2,80]},{37:[1,308],51:[1,307]},o($V61,[2,54],{35:$VI,45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU}),{8:[2,50]},{25:74,30:309,33:$Vn,48:$Vo,49:$Vp,71:$Vq,93:69,94:70,95:71,96:72,97:73,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,103:$Vw,105:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,120:$VD,121:$VE},o($V61,[2,53],{35:$VI,45:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS,113:$VT,114:$VU})],
defaultActions: {3:[2,2],45:[2,1],104:[2,39],149:[2,49],152:[2,66],168:[2,73],171:[2,78],203:[2,44],239:[2,82],258:[2,70],266:[2,40],270:[2,81],272:[2,45],273:[2,46],274:[2,47],283:[2,69],284:[2,71],285:[2,74],299:[2,48],302:[2,68],303:[2,79],304:[2,80],307:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    // imports
    let { errors } = require ('../Classes/Utils/Outs')
    const { Error } = require ('../Classes/Utils/Error')
    const { TypeError } = require ('../Classes/Utils/TypeError')

    // imports
    // Tipos
    const { Type } = require('../Classes/Utils/Type')
    // Instrucciones
    const { Print } = require('../Classes/Instructions/Print')
    const { InitID } = require('../Classes/Instructions/InitID')
    const { AsignID } = require('../Classes/Instructions/AsignID')
    const { If } = require('../Classes/Instructions/If')
    const { Block } = require('../Classes/Instructions/Block')
    const { Break } = require('../Classes/Instructions/Break')
    const { Continue } = require('../Classes/Instructions/Continue')
    const { While } = require('../Classes/Instructions/While')
    const { For } = require('../Classes/Instructions/For')
    const { When } = require('../Classes/Instructions/When')
    const { Case } = require('../Classes/Instructions/Case')
    const { CreateTable } = require('../Classes/Instructions/CreateTable')
    const { DropTable } = require('../Classes/Instructions/DropTable')
    const { TruncateTable } = require('../Classes/Instructions/TruncateTable')
    const { InsertTable } = require('../Classes/Instructions/InsertTable')
    const { Function } = require('../Classes/Instructions/Function')
    // Expresiones
    const { Primitive } = require('../Classes/Expressions/Primitive')
    const { AccessID } = require('../Classes/Expressions/AccessID')
    const { Arithmetic } = require('../Classes/Expressions/Arithmetic')
    const { Relational } = require('../Classes/Expressions/Relational')
    const { Logic } = require('../Classes/Expressions/Logic')
    const { Cast } = require('../Classes/Expressions/Cast')
    const { TypeOf } = require('../Classes/Expressions/TypeOf')
    const { Lower } = require('../Classes/Expressions/Lower')
    const { Upper } = require('../Classes/Expressions/Upper')
    const { Round } = require('../Classes/Expressions/Round')
    const { Len } = require('../Classes/Expressions/Len')
    const { Truncate } = require('../Classes/Expressions/Truncate')
    const { Parameter } = require('../Classes/Expressions/Parameter')
    const { CallFunction } = require('../Classes/Expressions/CallFunction')
    const { Return } = require('../Classes/Expressions/Return')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 77
break;
case 5:return 76
break;
case 6:return 40
break;
case 7:return 42
break;
case 8:return 43
break;
case 9:return 31
break;
case 10:return 36
break;
case 11:return 39
break;
case 12:return 46
break;
case 13:return 47
break;
case 14:return 53
break;
case 15:return 55
break;
case 16:return 56
break;
case 17:return 57
break;
case 18:return 58
break;
case 19:return 59
break;
case 20:return 60
break;
case 21:return 61
break;
case 22:return 63
break;
case 23:return 67
break;
case 24:return 68
break;
case 25:return 71
break;
case 26:return 72
break;
case 27:return 116
break;
case 28:return 74
break;
case 29:return 80
break;
case 30:return 73
break;
case 31:return 75
break;
case 32:return 78
break;
case 33:return 82
break;
case 34:return 83
break;
case 35:return 84
break;
case 36:return 86
break;
case 37:return 27
break;
case 38:return 28
break;
case 39:return 87
break;
case 40:return 89
break;
case 41:return 29
break;
case 42:return 90
break;
case 43:return 81
break;
case 44:return 117
break;
case 45:return 118
break;
case 46:return 119
break;
case 47:return 120
break;
case 48:return 71
break;
case 49:return 121
break;
case 50:return 122
break;
case 51:return 123
break;
case 52:return 124
break;
case 53:return 125
break;
case 54:return 126
break;
case 55:return 102
break;
case 56:return 103
break;
case 57:return 'RW_null'
break;
case 58:return 113
break;
case 59:return 114
break;
case 60:return 115
break;
case 61:return 33
break;
case 62:return 48
break;
case 63:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng - 2); return 98
break;
case 64:return 100
break;
case 65:return 99
break;
case 66:return 101
break;
case 67:return 49
break;
case 68:return 51
break;
case 69:return 8
break;
case 70:return 37
break;
case 71:return 85
break;
case 72:return 104
break;
case 73:return 105
break;
case 74:return 45
break;
case 75:return 106
break;
case 76:return 107
break;
case 77:return 35
break;
case 78:return 108
break;
case 79:return 109
break;
case 80:return 110
break;
case 81:return 111
break;
case 82:return 112
break;
case 83:errors.push(new Error(yy_.yylloc.first_line, yy_.yylloc.first_column + 1, TypeError.LEXICAL, `Caracter no reconocido. «${yy_.yytext}»`))
break;
case 84:return 5
break;
}
},
rules: [/^(?:\n)/i,/^(?:(--([^\r\n]*)?))/i,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/i,/^(?:([\s\r\t]+))/i,/^(?:BEGIN\b)/i,/^(?:END\b)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:SET\b)/i,/^(?:CREATE\b)/i,/^(?:TABLE\b)/i,/^(?:ALTER\b)/i,/^(?:ADD\b)/i,/^(?:DROP\b)/i,/^(?:COLUMN\b)/i,/^(?:RENAME\b)/i,/^(?:TO\b)/i,/^(?:INSERT\b)/i,/^(?:INTO\b)/i,/^(?:VALUES\b)/i,/^(?:AS\b)/i,/^(?:UPDATE\b)/i,/^(?:TRUNCATE\b)/i,/^(?:DELETE\b)/i,/^(?:CAST\b)/i,/^(?:THEN\b)/i,/^(?:WHEN\b)/i,/^(?:IF\b)/i,/^(?:ELSE\b)/i,/^(?:CASE\b)/i,/^(?:WHILE\b)/i,/^(?:FOR\b)/i,/^(?:IN\b)/i,/^(?:LOOP\b)/i,/^(?:BREAK\b)/i,/^(?:CONTINUE\b)/i,/^(?:FUNCTION\b)/i,/^(?:RETURNS\b)/i,/^(?:RETURN\b)/i,/^(?:PROCEDURE\b)/i,/^(?:PRINT\b)/i,/^(?:LOWER\b)/i,/^(?:UPPER\b)/i,/^(?:ROUND\b)/i,/^(?:LEN\b)/i,/^(?:TRUNCATE\b)/i,/^(?:TYPEOF\b)/i,/^(?:INT\b)/i,/^(?:DOUBLE\b)/i,/^(?:DATE\b)/i,/^(?:VARCHAR\b)/i,/^(?:BOOLEAN\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:(@(_)*[a-zA-Z][a-zA-Z0-9\_]*))/i,/^(?:((_)*[a-zA-Z][a-zA-Z0-9\_]*))/i,/^(?:("((([^\n\"\\]|\\.))*)"))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:('\d\d\d\d-\d\d-\d\d'))/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.\.)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}