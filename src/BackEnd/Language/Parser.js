/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,21],$V2=[1,22],$V3=[1,24],$V4=[1,25],$V5=[1,26],$V6=[1,27],$V7=[1,28],$V8=[1,29],$V9=[1,30],$Va=[1,31],$Vb=[1,32],$Vc=[1,33],$Vd=[1,34],$Ve=[1,35],$Vf=[1,39],$Vg=[1,36],$Vh=[1,37],$Vi=[1,38],$Vj=[2,5,24,25,26,35,36,40,46,49,53,59,62,63,66,68,69,70,73,74,75,80],$Vk=[1,71],$Vl=[1,77],$Vm=[1,73],$Vn=[1,72],$Vo=[1,74],$Vp=[1,75],$Vq=[1,76],$Vr=[1,78],$Vs=[1,79],$Vt=[1,80],$Vu=[1,92],$Vv=[1,91],$Vw=[1,99],$Vx=[1,100],$Vy=[1,101],$Vz=[1,102],$VA=[1,103],$VB=[8,33],$VC=[1,106],$VD=[8,33,38,44],$VE=[1,113],$VF=[1,110],$VG=[1,108],$VH=[1,109],$VI=[1,111],$VJ=[1,112],$VK=[1,114],$VL=[1,115],$VM=[1,116],$VN=[1,117],$VO=[1,118],$VP=[1,119],$VQ=[1,120],$VR=[8,30,33,38,39,44,58,65,67,68,69,72,76,80,89,90,91,92,93,94,95,96,97,98,99],$VS=[2,29],$VT=[8,30,32,33,44],$VU=[8,33,38,39,44,65,67,68,69,72,76,80,98,99],$VV=[1,171],$VW=[8,30,33,38,39,44,65,67,68,69,72,76,80,89,90,93,94,95,96,97,98,99],$VX=[8,30,33,38,39,44,65,67,68,69,72,76,80,93,98,99],$VY=[8,30,33,38,39,44,65,67,68,69,72,76,80,93,94,95,96,97,98,99],$VZ=[1,185],$V_=[33,39],$V$=[33,44];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"DECLAREID":7,"TK_semicolon":8,"ASIGNID":9,"SELECT":10,"CREATETABLE":11,"ALTERTAB":12,"DROPTAB":13,"INSERTREG":14,"UPDATETAB":15,"TRUNCATETAB":16,"DELETETAB":17,"IFSTRUCT":18,"CASESTRUCT_S":19,"WHILESTRUCT":20,"FORSTRUCT":21,"ENCAP":22,"PRINT":23,"RW_break":24,"RW_continue":25,"RW_declare":26,"DECLIDS":27,"TK_id":28,"TYPE":29,"TK_equal":30,"EXP":31,"RW_default":32,"TK_comma":33,"DECLID":34,"RW_set":35,"RW_select":36,"LIST_IDS":37,"RW_from":38,"RW_where":39,"RW_create":40,"RW_table":41,"TK_lpar":42,"ATTRIBUTES":43,"TK_rpar":44,"ATTRIBUTE":45,"RW_alter":46,"ACTION":47,"RW_add":48,"RW_drop":49,"RW_column":50,"RW_rename":51,"RW_to":52,"RW_insert":53,"RW_into":54,"RW_values":55,"LIST_EXPS":56,"SELECTREG":57,"TK_mult":58,"RW_update":59,"VALUESTAB":60,"VALUETAB":61,"RW_truncate":62,"RW_delete":63,"IDS":64,"RW_as":65,"RW_if":66,"RW_then":67,"RW_else":68,"RW_end":69,"RW_case":70,"ENVCASE_S":71,"RW_when":72,"RW_print":73,"RW_while":74,"RW_for":75,"RW_in":76,"TK_int":77,"TK_dot":78,"RW_loop":79,"RW_begin":80,"ARITHMETICS":81,"RELATIONALS":82,"LOGICS":83,"CAST":84,"TK_str":85,"TK_double":86,"RW_true":87,"RW_false":88,"TK_plus":89,"TK_minus":90,"TK_div":91,"TK_mod":92,"TK_notequal":93,"TK_lessequal":94,"TK_greatequal":95,"TK_less":96,"TK_great":97,"RW_and":98,"RW_or":99,"RW_not":100,"RW_cast":101,"RW_int":102,"RW_float":103,"RW_date":104,"RW_varchar":105,"RW_boolean":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"TK_semicolon",24:"RW_break",25:"RW_continue",26:"RW_declare",28:"TK_id",30:"TK_equal",32:"RW_default",33:"TK_comma",35:"RW_set",36:"RW_select",38:"RW_from",39:"RW_where",40:"RW_create",41:"RW_table",42:"TK_lpar",44:"TK_rpar",46:"RW_alter",48:"RW_add",49:"RW_drop",50:"RW_column",51:"RW_rename",52:"RW_to",53:"RW_insert",54:"RW_into",55:"RW_values",58:"TK_mult",59:"RW_update",62:"RW_truncate",63:"RW_delete",65:"RW_as",66:"RW_if",67:"RW_then",68:"RW_else",69:"RW_end",70:"RW_case",72:"RW_when",73:"RW_print",74:"RW_while",75:"RW_for",76:"RW_in",77:"TK_int",78:"TK_dot",79:"RW_loop",80:"RW_begin",85:"TK_str",86:"TK_double",87:"RW_true",88:"RW_false",89:"TK_plus",90:"TK_minus",91:"TK_div",92:"TK_mod",93:"TK_notequal",94:"TK_lessequal",95:"TK_greatequal",96:"TK_less",97:"TK_great",98:"RW_and",99:"RW_or",100:"RW_not",101:"RW_cast",102:"RW_int",103:"RW_float",104:"RW_date",105:"RW_varchar",106:"RW_boolean"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[7,2],[7,5],[7,5],[27,3],[27,1],[34,2],[9,4],[10,6],[10,4],[10,2],[11,6],[43,3],[43,1],[45,2],[12,4],[47,3],[47,3],[47,3],[47,5],[13,3],[14,10],[57,6],[57,4],[57,4],[15,8],[60,3],[60,1],[61,3],[16,3],[17,7],[37,3],[37,1],[64,3],[64,1],[56,3],[56,1],[18,8],[18,6],[19,6],[19,5],[19,4],[19,3],[71,5],[71,4],[71,2],[23,2],[20,3],[21,8],[22,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,2],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[83,3],[83,3],[83,2],[84,6],[29,1],[29,1],[29,1],[29,1],[29,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 23:
console.log(`Error SINT√ÅCTICO: ${yytext}. ${this._$.first_line}:${this._$.first_column + 1}`)
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V1,25:$V2,26:$V3,35:$V4,36:$V5,40:$V6,46:$V7,49:$V8,53:$V9,59:$Va,62:$Vb,63:$Vc,66:$Vd,70:$Ve,73:$Vf,74:$Vg,75:$Vh,80:$Vi},{1:[3]},{2:$V0,5:[1,40],6:41,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V1,25:$V2,26:$V3,35:$V4,36:$V5,40:$V6,46:$V7,49:$V8,53:$V9,59:$Va,62:$Vb,63:$Vc,66:$Vd,70:$Ve,73:$Vf,74:$Vg,75:$Vh,80:$Vi},{1:[2,2]},o($Vj,[2,4]),{8:[1,42]},{8:[1,43]},{8:[1,44]},{8:[1,45]},{8:[1,46]},{8:[1,47]},{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51]},{8:[1,52]},{8:[1,53]},{8:[1,54]},{8:[1,55]},{8:[1,56]},{8:[1,57]},{8:[1,58]},{8:[1,59]},o($Vj,[2,23]),{27:60,28:[1,61],34:62},{28:[1,63]},{28:$Vk,31:66,37:64,42:$Vl,64:65,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{41:[1,81]},{41:[1,82]},{41:[1,83]},{54:[1,84]},{28:[1,85]},{41:[1,86]},{38:[1,87]},{28:$Vk,31:88,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:[1,89],68:$Vu,71:90,72:$Vv},{28:$Vk,31:93,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:94,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{2:$V0,4:95,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V1,25:$V2,26:$V3,35:$V4,36:$V5,40:$V6,46:$V7,49:$V8,53:$V9,59:$Va,62:$Vb,63:$Vc,66:$Vd,70:$Ve,73:$Vf,74:$Vg,75:$Vh,80:$Vi},{28:$Vk,31:96,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{1:[2,1]},o($Vj,[2,3]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),{8:[2,24],33:[1,97]},{29:98,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA},o($VB,[2,28]),{30:[1,104]},{8:[2,33],33:$VC,38:[1,105]},o($VD,[2,55]),o($VD,[2,57],{30:$VE,58:$VF,65:[1,107],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ}),o($VR,[2,73]),o($VR,[2,74]),o($VR,[2,75]),o($VR,[2,76]),o($VR,[2,77]),o($VR,[2,78]),o($VR,[2,79]),o($VR,[2,80]),o($VR,[2,81]),o($VR,[2,82]),{28:$Vk,31:121,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:122,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:123,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{42:[1,124]},{28:[1,125]},{28:[1,126]},{28:[1,127]},{28:[1,128]},{35:[1,129]},{28:[1,130]},{28:[1,131]},{30:$VE,58:$VF,67:[1,132],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{68:$Vu,71:133,72:$Vv},{69:[1,134]},{28:$Vk,31:135,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:136,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{22:137,30:$VE,58:$VF,80:$Vi,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{30:$VE,58:$VF,76:[1,138],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{2:$V0,6:41,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V1,25:$V2,26:$V3,35:$V4,36:$V5,40:$V6,46:$V7,49:$V8,53:$V9,59:$Va,62:$Vb,63:$Vc,66:$Vd,69:[1,139],70:$Ve,73:$Vf,74:$Vg,75:$Vh,80:$Vi},{8:[2,69],30:$VE,58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{28:[1,141],34:140},o($VB,$VS,{30:[1,142],32:[1,143]}),o($VT,[2,100]),o($VT,[2,101]),o($VT,[2,102]),o($VT,[2,103]),o($VT,[2,104]),{28:$Vk,31:144,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:[1,145]},{28:$Vk,31:66,42:$Vl,64:146,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:[1,147]},{28:$Vk,31:148,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:149,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:150,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:151,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:152,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:153,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:154,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:155,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:156,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:157,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:158,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:159,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:160,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{30:$VE,44:[1,161],58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},o($VR,[2,89]),o($VU,[2,98],{30:$VE,58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO}),{28:$Vk,31:162,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{42:[1,163]},{47:164,48:[1,165],49:[1,166],51:[1,167]},{8:[2,43]},{42:[1,168]},{28:$VV,60:169,61:170},{8:[2,52]},{39:[1,172]},{2:$V0,4:173,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V1,25:$V2,26:$V3,35:$V4,36:$V5,40:$V6,46:$V7,49:$V8,53:$V9,59:$Va,62:$Vb,63:$Vc,66:$Vd,70:$Ve,73:$Vf,74:$Vg,75:$Vh,80:$Vi},{69:[1,174]},{8:[2,65],65:[1,175]},{30:$VE,58:$VF,67:[1,176],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{30:$VE,58:$VF,69:[2,68],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{8:[2,70]},{77:[1,177]},o([8,79],[2,72]),o($VB,[2,27]),{29:178,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA},{28:$Vk,31:179,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{28:$Vk,31:180,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{8:[2,30],30:$VE,58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{8:[2,32],39:[1,181]},o($VD,[2,54]),o($VD,[2,56]),o($VW,[2,84],{58:$VF,91:$VI,92:$VJ}),o($VW,[2,85],{58:$VF,91:$VI,92:$VJ}),o($VR,[2,86]),o($VR,[2,87]),o($VR,[2,88]),o($VX,[2,90],{58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,94:$VL,95:$VM,96:$VN,97:$VO}),o($VX,[2,91],{58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,94:$VL,95:$VM,96:$VN,97:$VO}),o($VY,[2,92],{58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ}),o($VY,[2,93],{58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ}),o($VY,[2,94],{58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ}),o($VY,[2,95],{58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ}),o($VU,[2,96],{30:$VE,58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO}),o([8,33,38,39,44,65,67,68,69,72,76,80,99],[2,97],{30:$VE,58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP}),o($VR,[2,83]),{30:$VE,58:$VF,65:[1,182],89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{28:$VZ,43:183,45:184},{8:[2,38]},{28:[1,186]},{50:[1,187]},{50:[1,189],52:[1,188]},{28:$Vk,31:66,37:190,42:$Vl,64:65,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{33:[1,192],39:[1,191]},o($V_,[2,50]),{30:[1,193]},{28:[1,194]},{2:$V0,6:41,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V1,25:$V2,26:$V3,35:$V4,36:$V5,40:$V6,46:$V7,49:$V8,53:$V9,59:$Va,62:$Vb,63:$Vc,66:$Vd,68:[1,195],69:[1,196],70:$Ve,73:$Vf,74:$Vg,75:$Vh,80:$Vi},{8:[2,64],65:[1,197]},{28:[1,198]},{28:$Vk,31:199,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{78:[1,200]},o($VB,$VS),{8:[2,25],30:$VE,58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{8:[2,26],30:$VE,58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{28:$Vk,31:201,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{29:202,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA},{33:[1,204],44:[1,203]},o($V$,[2,36]),{29:205,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA},{29:206,102:$Vw,103:$Vx,104:$Vy,105:$Vz,106:$VA},{28:[1,207]},{28:[1,208]},{28:[1,209]},{33:$VC,44:[1,210]},{28:[1,211]},{28:$VV,61:212},{28:$Vk,31:213,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{30:[1,214]},{2:$V0,4:215,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V1,25:$V2,26:$V3,35:$V4,36:$V5,40:$V6,46:$V7,49:$V8,53:$V9,59:$Va,62:$Vb,63:$Vc,66:$Vd,70:$Ve,73:$Vf,74:$Vg,75:$Vh,80:$Vi},{66:[1,216]},{28:[1,217]},{8:[2,63]},{30:$VE,58:$VF,68:$Vu,69:[2,67],71:218,72:$Vv,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{77:[1,219]},{8:[2,31],30:$VE,58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{44:[1,220]},{8:[2,34]},{28:$VZ,45:221},o($V$,[2,37]),{8:[2,39]},{8:[2,40]},{8:[2,41]},{52:[1,222]},{55:[1,223]},{30:[1,224]},o($V_,[2,49]),o($V_,[2,51],{30:$VE,58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ}),{28:$Vk,31:225,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{2:$V0,6:41,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V1,25:$V2,26:$V3,35:$V4,36:$V5,40:$V6,46:$V7,49:$V8,53:$V9,59:$Va,62:$Vb,63:$Vc,66:$Vd,69:[1,226],70:$Ve,73:$Vf,74:$Vg,75:$Vh,80:$Vi},{8:[2,61]},{8:[2,62]},{69:[2,66]},{22:227,80:$Vi},o($VR,[2,99]),o($V$,[2,35]),{28:[1,228]},{42:[1,229]},{28:$Vk,31:230,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{8:[2,53],30:$VE,58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{66:[1,231]},{79:[1,232]},{8:[2,42]},{28:$Vk,31:234,42:$Vl,56:233,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},{8:[2,48],30:$VE,58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{8:[2,60]},{8:[2,71]},{33:[1,236],44:[1,235]},o($V$,[2,59],{30:$VE,58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ}),{8:[2,44]},{28:$Vk,31:237,42:$Vl,77:$Vm,81:67,82:68,83:69,84:70,85:$Vn,86:$Vo,87:$Vp,88:$Vq,90:$Vr,100:$Vs,101:$Vt},o($V$,[2,58],{30:$VE,58:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ})],
defaultActions: {3:[2,2],40:[2,1],127:[2,43],130:[2,52],137:[2,70],164:[2,38],198:[2,63],203:[2,34],206:[2,39],207:[2,40],208:[2,41],216:[2,61],217:[2,62],218:[2,66],228:[2,42],231:[2,60],232:[2,71],235:[2,44]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    // imports

    // imports
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 80
break;
case 5:return 69
break;
case 6:return 36
break;
case 7:return 38
break;
case 8:return 39
break;
case 9:return 26
break;
case 10:return 32
break;
case 11:return 35
break;
case 12:return 40
break;
case 13:return 41
break;
case 14:return 46
break;
case 15:return 48
break;
case 16:return 49
break;
case 17:return 50
break;
case 18:return 51
break;
case 19:return 52
break;
case 20:return 53
break;
case 21:return 54
break;
case 22:return 55
break;
case 23:return 65
break;
case 24:return 59
break;
case 25:return 62
break;
case 26:return 63
break;
case 27:return 101
break;
case 28:return 67
break;
case 29:return 72
break;
case 30:return 66
break;
case 31:return 68
break;
case 32:return 70
break;
case 33:return 74
break;
case 34:return 75
break;
case 35:return 76
break;
case 36:return 79
break;
case 37:return 24
break;
case 38:return 25
break;
case 39:return 'RW_function'
break;
case 40:return 'RW_return'
break;
case 41:return 'RW_procedure'
break;
case 42:return 73
break;
case 43:return 'RW_lower'
break;
case 44:return 'RW_upper'
break;
case 45:return 'RW_round'
break;
case 46:return 'RW_len'
break;
case 47:return 62
break;
case 48:return 'RW_typeof'
break;
case 49:return 102
break;
case 50:return 103
break;
case 51:return 104
break;
case 52:return 105
break;
case 53:return 106
break;
case 54:return 87
break;
case 55:return 88
break;
case 56:return 'RW_null'
break;
case 57:return 98
break;
case 58:return 99
break;
case 59:return 100
break;
case 60:return 28
break;
case 61:return 85
break;
case 62:return 86
break;
case 63:return 77
break;
case 64:return 42
break;
case 65:return 44
break;
case 66:return 8
break;
case 67:return 33
break;
case 68:return 78
break;
case 69:return 89
break;
case 70:return 90
break;
case 71:return 58
break;
case 72:return 91
break;
case 73:return 92
break;
case 74:return 30
break;
case 75:return 93
break;
case 76:return 94
break;
case 77:return 95
break;
case 78:return 96
break;
case 79:return 97
break;
case 80:console.log(`Error Lexico: ${yy_.yytext}`)
break;
case 81:return 5
break;
}
},
rules: [/^(?:\n)/i,/^(?:(--([^\r\n]*)?))/i,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/i,/^(?:([ \r\t]+))/i,/^(?:BEGIN\b)/i,/^(?:END\b)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:SET\b)/i,/^(?:CREATE\b)/i,/^(?:TABLE\b)/i,/^(?:ALTER\b)/i,/^(?:ADD\b)/i,/^(?:DROP\b)/i,/^(?:COLUMN\b)/i,/^(?:RENAME\b)/i,/^(?:TO\b)/i,/^(?:INSERT\b)/i,/^(?:INTO\b)/i,/^(?:VALUES\b)/i,/^(?:AS\b)/i,/^(?:UPDATE\b)/i,/^(?:TRUNCATE\b)/i,/^(?:DELETE\b)/i,/^(?:CAST\b)/i,/^(?:THEN\b)/i,/^(?:WHEN\b)/i,/^(?:IF\b)/i,/^(?:ELSE\b)/i,/^(?:CASE\b)/i,/^(?:WHILE\b)/i,/^(?:FOR\b)/i,/^(?:IN\b)/i,/^(?:LOOP\b)/i,/^(?:BREAK\b)/i,/^(?:CONTINUE\b)/i,/^(?:FUNCTION\b)/i,/^(?:RETURN\b)/i,/^(?:PROCEDURE\b)/i,/^(?:PRINT\b)/i,/^(?:LOWER\b)/i,/^(?:UPPER\b)/i,/^(?:ROUND\b)/i,/^(?:LEN\b)/i,/^(?:TRUNCATE\b)/i,/^(?:TYPEOF\b)/i,/^(?:INT\b)/i,/^(?:FLOAT\b)/i,/^(?:DATE\b)/i,/^(?:VARCHAR\b)/i,/^(?:BOOLEAN\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:(@?(_)*[a-zA-Z][a-zA-Z0-9\_]*))/i,/^(?:(("((([^\n\"\\]|\\.))*)"|'((([^\n\"\\]|\\.))*)')))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.\.)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}