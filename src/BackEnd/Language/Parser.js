/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,22],$V2=[1,23],$V3=[1,24],$V4=[1,25],$V5=[1,26],$V6=[1,27],$V7=[1,28],$V8=[1,29],$V9=[1,30],$Va=[1,31],$Vb=[1,32],$Vc=[1,33],$Vd=[1,37],$Ve=[1,34],$Vf=[1,35],$Vg=[1,36],$Vh=[2,5,24,33,34,38,44,47,51,57,60,61,64,66,67,68,71,72,73,78],$Vi=[1,67],$Vj=[1,73],$Vk=[1,69],$Vl=[1,68],$Vm=[1,70],$Vn=[1,71],$Vo=[1,72],$Vp=[1,74],$Vq=[1,75],$Vr=[1,76],$Vs=[1,88],$Vt=[1,87],$Vu=[1,95],$Vv=[1,96],$Vw=[1,97],$Vx=[1,98],$Vy=[1,99],$Vz=[8,31],$VA=[1,102],$VB=[8,31,36,42],$VC=[1,109],$VD=[1,106],$VE=[1,104],$VF=[1,105],$VG=[1,107],$VH=[1,108],$VI=[1,110],$VJ=[1,111],$VK=[1,112],$VL=[1,113],$VM=[1,114],$VN=[1,115],$VO=[1,116],$VP=[8,28,31,36,37,42,56,63,65,66,67,70,74,78,87,88,89,90,91,92,93,94,95,96,97],$VQ=[2,27],$VR=[8,28,30,31,42],$VS=[8,31,36,37,42,63,65,66,67,70,74,78,96,97],$VT=[1,167],$VU=[8,28,31,36,37,42,63,65,66,67,70,74,78,87,88,91,92,93,94,95,96,97],$VV=[8,28,31,36,37,42,63,65,66,67,70,74,78,91,96,97],$VW=[8,28,31,36,37,42,63,65,66,67,70,74,78,91,92,93,94,95,96,97],$VX=[1,181],$VY=[31,37],$VZ=[31,42];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"DECLAREID":7,"TK_semicolon":8,"ASIGNID":9,"SELECT":10,"CREATETABLE":11,"ALTERTAB":12,"DROPTAB":13,"INSERTREG":14,"UPDATETAB":15,"TRUNCATETAB":16,"DELETETAB":17,"IFSTRUCT":18,"CASESTRUCT_S":19,"WHILESTRUCT":20,"FORSTRUCT":21,"ENCAP":22,"PRINT":23,"RW_declare":24,"DECLIDS":25,"TK_id":26,"TYPE":27,"TK_equal":28,"EXP":29,"RW_default":30,"TK_comma":31,"DECLID":32,"RW_set":33,"RW_select":34,"LIST_IDS":35,"RW_from":36,"RW_where":37,"RW_create":38,"RW_table":39,"TK_lpar":40,"ATTRIBUTES":41,"TK_rpar":42,"ATTRIBUTE":43,"RW_alter":44,"ACTION":45,"RW_add":46,"RW_drop":47,"RW_column":48,"RW_rename":49,"RW_to":50,"RW_insert":51,"RW_into":52,"RW_values":53,"LIST_EXPS":54,"SELECTREG":55,"TK_mult":56,"RW_update":57,"VALUESTAB":58,"VALUETAB":59,"RW_truncate":60,"RW_delete":61,"IDS":62,"RW_as":63,"RW_if":64,"RW_then":65,"RW_else":66,"RW_end":67,"RW_case":68,"ENVCASE_S":69,"RW_when":70,"RW_print":71,"RW_while":72,"RW_for":73,"RW_in":74,"TK_int":75,"TK_dot":76,"RW_loop":77,"RW_begin":78,"ARITHMETICS":79,"RELATIONALS":80,"LOGICS":81,"CAST":82,"TK_str":83,"TK_double":84,"RW_true":85,"RW_false":86,"TK_plus":87,"TK_minus":88,"TK_div":89,"TK_mod":90,"TK_notequal":91,"TK_lessequal":92,"TK_greatequal":93,"TK_less":94,"TK_great":95,"RW_and":96,"RW_or":97,"RW_not":98,"RW_cast":99,"RW_int":100,"RW_float":101,"RW_date":102,"RW_varchar":103,"RW_boolean":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"TK_semicolon",24:"RW_declare",26:"TK_id",28:"TK_equal",30:"RW_default",31:"TK_comma",33:"RW_set",34:"RW_select",36:"RW_from",37:"RW_where",38:"RW_create",39:"RW_table",40:"TK_lpar",42:"TK_rpar",44:"RW_alter",46:"RW_add",47:"RW_drop",48:"RW_column",49:"RW_rename",50:"RW_to",51:"RW_insert",52:"RW_into",53:"RW_values",56:"TK_mult",57:"RW_update",60:"RW_truncate",61:"RW_delete",63:"RW_as",64:"RW_if",65:"RW_then",66:"RW_else",67:"RW_end",68:"RW_case",70:"RW_when",71:"RW_print",72:"RW_while",73:"RW_for",74:"RW_in",75:"TK_int",76:"TK_dot",77:"RW_loop",78:"RW_begin",83:"TK_str",84:"TK_double",85:"RW_true",86:"RW_false",87:"TK_plus",88:"TK_minus",89:"TK_div",90:"TK_mod",91:"TK_notequal",92:"TK_lessequal",93:"TK_greatequal",94:"TK_less",95:"TK_great",96:"RW_and",97:"RW_or",98:"RW_not",99:"RW_cast",100:"RW_int",101:"RW_float",102:"RW_date",103:"RW_varchar",104:"RW_boolean"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[7,2],[7,5],[7,5],[25,3],[25,1],[32,2],[9,4],[10,6],[10,4],[10,2],[11,6],[41,3],[41,1],[43,2],[12,4],[45,3],[45,3],[45,3],[45,5],[13,3],[14,10],[55,6],[55,4],[55,4],[15,8],[58,3],[58,1],[59,3],[16,3],[17,7],[35,3],[35,1],[62,3],[62,1],[54,3],[54,1],[18,8],[18,6],[19,6],[19,5],[19,4],[19,3],[69,5],[69,4],[69,2],[23,2],[20,3],[21,8],[22,3],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,2],[80,3],[80,3],[80,3],[80,3],[80,3],[80,3],[81,3],[81,3],[81,2],[82,6],[27,1],[27,1],[27,1],[27,1],[27,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 21:
console.log(`Error SINT√ÅCTICO: ${yytext}. ${this._$.first_line}:${this._$.first_column + 1}`)
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V1,33:$V2,34:$V3,38:$V4,44:$V5,47:$V6,51:$V7,57:$V8,60:$V9,61:$Va,64:$Vb,68:$Vc,71:$Vd,72:$Ve,73:$Vf,78:$Vg},{1:[3]},{2:$V0,5:[1,38],6:39,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V1,33:$V2,34:$V3,38:$V4,44:$V5,47:$V6,51:$V7,57:$V8,60:$V9,61:$Va,64:$Vb,68:$Vc,71:$Vd,72:$Ve,73:$Vf,78:$Vg},{1:[2,2]},o($Vh,[2,4]),{8:[1,40]},{8:[1,41]},{8:[1,42]},{8:[1,43]},{8:[1,44]},{8:[1,45]},{8:[1,46]},{8:[1,47]},{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51]},{8:[1,52]},{8:[1,53]},{8:[1,54]},{8:[1,55]},o($Vh,[2,21]),{25:56,26:[1,57],32:58},{26:[1,59]},{26:$Vi,29:62,35:60,40:$Vj,62:61,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{39:[1,77]},{39:[1,78]},{39:[1,79]},{52:[1,80]},{26:[1,81]},{39:[1,82]},{36:[1,83]},{26:$Vi,29:84,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:[1,85],66:$Vs,69:86,70:$Vt},{26:$Vi,29:89,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:90,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{2:$V0,4:91,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V1,33:$V2,34:$V3,38:$V4,44:$V5,47:$V6,51:$V7,57:$V8,60:$V9,61:$Va,64:$Vb,68:$Vc,71:$Vd,72:$Ve,73:$Vf,78:$Vg},{26:$Vi,29:92,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{1:[2,1]},o($Vh,[2,3]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),o($Vh,[2,20]),{8:[2,22],31:[1,93]},{27:94,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy},o($Vz,[2,26]),{28:[1,100]},{8:[2,31],31:$VA,36:[1,101]},o($VB,[2,53]),o($VB,[2,55],{28:$VC,56:$VD,63:[1,103],87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO}),o($VP,[2,71]),o($VP,[2,72]),o($VP,[2,73]),o($VP,[2,74]),o($VP,[2,75]),o($VP,[2,76]),o($VP,[2,77]),o($VP,[2,78]),o($VP,[2,79]),o($VP,[2,80]),{26:$Vi,29:117,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:118,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:119,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{40:[1,120]},{26:[1,121]},{26:[1,122]},{26:[1,123]},{26:[1,124]},{33:[1,125]},{26:[1,126]},{26:[1,127]},{28:$VC,56:$VD,65:[1,128],87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO},{66:$Vs,69:129,70:$Vt},{67:[1,130]},{26:$Vi,29:131,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:132,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{22:133,28:$VC,56:$VD,78:$Vg,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO},{28:$VC,56:$VD,74:[1,134],87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO},{2:$V0,6:39,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V1,33:$V2,34:$V3,38:$V4,44:$V5,47:$V6,51:$V7,57:$V8,60:$V9,61:$Va,64:$Vb,67:[1,135],68:$Vc,71:$Vd,72:$Ve,73:$Vf,78:$Vg},{8:[2,67],28:$VC,56:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO},{26:[1,137],32:136},o($Vz,$VQ,{28:[1,138],30:[1,139]}),o($VR,[2,98]),o($VR,[2,99]),o($VR,[2,100]),o($VR,[2,101]),o($VR,[2,102]),{26:$Vi,29:140,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:[1,141]},{26:$Vi,29:62,40:$Vj,62:142,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:[1,143]},{26:$Vi,29:144,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:145,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:146,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:147,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:148,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:149,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:150,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:151,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:152,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:153,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:154,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:155,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:156,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{28:$VC,42:[1,157],56:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO},o($VP,[2,87]),o($VS,[2,96],{28:$VC,56:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM}),{26:$Vi,29:158,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{40:[1,159]},{45:160,46:[1,161],47:[1,162],49:[1,163]},{8:[2,41]},{40:[1,164]},{26:$VT,58:165,59:166},{8:[2,50]},{37:[1,168]},{2:$V0,4:169,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V1,33:$V2,34:$V3,38:$V4,44:$V5,47:$V6,51:$V7,57:$V8,60:$V9,61:$Va,64:$Vb,68:$Vc,71:$Vd,72:$Ve,73:$Vf,78:$Vg},{67:[1,170]},{8:[2,63],63:[1,171]},{28:$VC,56:$VD,65:[1,172],87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO},{28:$VC,56:$VD,67:[2,66],87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO},{8:[2,68]},{75:[1,173]},o([8,77],[2,70]),o($Vz,[2,25]),{27:174,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy},{26:$Vi,29:175,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{26:$Vi,29:176,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{8:[2,28],28:$VC,56:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO},{8:[2,30],37:[1,177]},o($VB,[2,52]),o($VB,[2,54]),o($VU,[2,82],{56:$VD,89:$VG,90:$VH}),o($VU,[2,83],{56:$VD,89:$VG,90:$VH}),o($VP,[2,84]),o($VP,[2,85]),o($VP,[2,86]),o($VV,[2,88],{56:$VD,87:$VE,88:$VF,89:$VG,90:$VH,92:$VJ,93:$VK,94:$VL,95:$VM}),o($VV,[2,89],{56:$VD,87:$VE,88:$VF,89:$VG,90:$VH,92:$VJ,93:$VK,94:$VL,95:$VM}),o($VW,[2,90],{56:$VD,87:$VE,88:$VF,89:$VG,90:$VH}),o($VW,[2,91],{56:$VD,87:$VE,88:$VF,89:$VG,90:$VH}),o($VW,[2,92],{56:$VD,87:$VE,88:$VF,89:$VG,90:$VH}),o($VW,[2,93],{56:$VD,87:$VE,88:$VF,89:$VG,90:$VH}),o($VS,[2,94],{28:$VC,56:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM}),o([8,31,36,37,42,63,65,66,67,70,74,78,97],[2,95],{28:$VC,56:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN}),o($VP,[2,81]),{28:$VC,56:$VD,63:[1,178],87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO},{26:$VX,41:179,43:180},{8:[2,36]},{26:[1,182]},{48:[1,183]},{48:[1,185],50:[1,184]},{26:$Vi,29:62,35:186,40:$Vj,62:61,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{31:[1,188],37:[1,187]},o($VY,[2,48]),{28:[1,189]},{26:[1,190]},{2:$V0,6:39,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V1,33:$V2,34:$V3,38:$V4,44:$V5,47:$V6,51:$V7,57:$V8,60:$V9,61:$Va,64:$Vb,66:[1,191],67:[1,192],68:$Vc,71:$Vd,72:$Ve,73:$Vf,78:$Vg},{8:[2,62],63:[1,193]},{26:[1,194]},{26:$Vi,29:195,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{76:[1,196]},o($Vz,$VQ),{8:[2,23],28:$VC,56:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO},{8:[2,24],28:$VC,56:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO},{26:$Vi,29:197,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{27:198,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy},{31:[1,200],42:[1,199]},o($VZ,[2,34]),{27:201,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy},{27:202,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy},{26:[1,203]},{26:[1,204]},{26:[1,205]},{31:$VA,42:[1,206]},{26:[1,207]},{26:$VT,59:208},{26:$Vi,29:209,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{28:[1,210]},{2:$V0,4:211,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V1,33:$V2,34:$V3,38:$V4,44:$V5,47:$V6,51:$V7,57:$V8,60:$V9,61:$Va,64:$Vb,68:$Vc,71:$Vd,72:$Ve,73:$Vf,78:$Vg},{64:[1,212]},{26:[1,213]},{8:[2,61]},{28:$VC,56:$VD,66:$Vs,67:[2,65],69:214,70:$Vt,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO},{75:[1,215]},{8:[2,29],28:$VC,56:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO},{42:[1,216]},{8:[2,32]},{26:$VX,43:217},o($VZ,[2,35]),{8:[2,37]},{8:[2,38]},{8:[2,39]},{50:[1,218]},{53:[1,219]},{28:[1,220]},o($VY,[2,47]),o($VY,[2,49],{28:$VC,56:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO}),{26:$Vi,29:221,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{2:$V0,6:39,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V1,33:$V2,34:$V3,38:$V4,44:$V5,47:$V6,51:$V7,57:$V8,60:$V9,61:$Va,64:$Vb,67:[1,222],68:$Vc,71:$Vd,72:$Ve,73:$Vf,78:$Vg},{8:[2,59]},{8:[2,60]},{67:[2,64]},{22:223,78:$Vg},o($VP,[2,97]),o($VZ,[2,33]),{26:[1,224]},{40:[1,225]},{26:$Vi,29:226,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{8:[2,51],28:$VC,56:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO},{64:[1,227]},{77:[1,228]},{8:[2,40]},{26:$Vi,29:230,40:$Vj,54:229,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},{8:[2,46],28:$VC,56:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO},{8:[2,58]},{8:[2,69]},{31:[1,232],42:[1,231]},o($VZ,[2,57],{28:$VC,56:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO}),{8:[2,42]},{26:$Vi,29:233,40:$Vj,75:$Vk,79:63,80:64,81:65,82:66,83:$Vl,84:$Vm,85:$Vn,86:$Vo,88:$Vp,98:$Vq,99:$Vr},o($VZ,[2,56],{28:$VC,56:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,92:$VJ,93:$VK,94:$VL,95:$VM,96:$VN,97:$VO})],
defaultActions: {3:[2,2],38:[2,1],123:[2,41],126:[2,50],133:[2,68],160:[2,36],194:[2,61],199:[2,32],202:[2,37],203:[2,38],204:[2,39],212:[2,59],213:[2,60],214:[2,64],224:[2,40],227:[2,58],228:[2,69],231:[2,42]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    // imports

    // imports
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 78
break;
case 5:return 67
break;
case 6:return 34
break;
case 7:return 36
break;
case 8:return 37
break;
case 9:return 24
break;
case 10:return 30
break;
case 11:return 33
break;
case 12:return 38
break;
case 13:return 39
break;
case 14:return 44
break;
case 15:return 46
break;
case 16:return 47
break;
case 17:return 48
break;
case 18:return 49
break;
case 19:return 50
break;
case 20:return 51
break;
case 21:return 52
break;
case 22:return 53
break;
case 23:return 63
break;
case 24:return 57
break;
case 25:return 60
break;
case 26:return 61
break;
case 27:return 99
break;
case 28:return 65
break;
case 29:return 70
break;
case 30:return 64
break;
case 31:return 66
break;
case 32:return 68
break;
case 33:return 72
break;
case 34:return 73
break;
case 35:return 74
break;
case 36:return 77
break;
case 37:return 'RW_break'
break;
case 38:return 'RW_continue'
break;
case 39:return 'RW_function'
break;
case 40:return 'RW_return'
break;
case 41:return 'RW_procedure'
break;
case 42:return 71
break;
case 43:return 'RW_lower'
break;
case 44:return 'RW_upper'
break;
case 45:return 'RW_round'
break;
case 46:return 'RW_len'
break;
case 47:return 60
break;
case 48:return 'RW_typeof'
break;
case 49:return 100
break;
case 50:return 101
break;
case 51:return 102
break;
case 52:return 103
break;
case 53:return 104
break;
case 54:return 85
break;
case 55:return 86
break;
case 56:return 'RW_null'
break;
case 57:return 96
break;
case 58:return 97
break;
case 59:return 98
break;
case 60:return 26
break;
case 61:return 83
break;
case 62:return 84
break;
case 63:return 75
break;
case 64:return 40
break;
case 65:return 42
break;
case 66:return 8
break;
case 67:return 31
break;
case 68:return 76
break;
case 69:return 87
break;
case 70:return 88
break;
case 71:return 56
break;
case 72:return 89
break;
case 73:return 90
break;
case 74:return 28
break;
case 75:return 91
break;
case 76:return 92
break;
case 77:return 93
break;
case 78:return 94
break;
case 79:return 95
break;
case 80:console.log(`Error Lexico: ${yy_.yytext}`)
break;
case 81:return 5
break;
}
},
rules: [/^(?:\n)/i,/^(?:(--([^\r\n]*)?))/i,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/i,/^(?:([ \r\t]+))/i,/^(?:BEGIN\b)/i,/^(?:END\b)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:SET\b)/i,/^(?:CREATE\b)/i,/^(?:TABLE\b)/i,/^(?:ALTER\b)/i,/^(?:ADD\b)/i,/^(?:DROP\b)/i,/^(?:COLUMN\b)/i,/^(?:RENAME\b)/i,/^(?:TO\b)/i,/^(?:INSERT\b)/i,/^(?:INTO\b)/i,/^(?:VALUES\b)/i,/^(?:AS\b)/i,/^(?:UPDATE\b)/i,/^(?:TRUNCATE\b)/i,/^(?:DELETE\b)/i,/^(?:CAST\b)/i,/^(?:THEN\b)/i,/^(?:WHEN\b)/i,/^(?:IF\b)/i,/^(?:ELSE\b)/i,/^(?:CASE\b)/i,/^(?:WHILE\b)/i,/^(?:FOR\b)/i,/^(?:IN\b)/i,/^(?:LOOP\b)/i,/^(?:BREAK\b)/i,/^(?:CONTINUE\b)/i,/^(?:FUNCTION\b)/i,/^(?:RETURN\b)/i,/^(?:PROCEDURE\b)/i,/^(?:PRINT\b)/i,/^(?:LOWER\b)/i,/^(?:UPPER\b)/i,/^(?:ROUND\b)/i,/^(?:LEN\b)/i,/^(?:TRUNCATE\b)/i,/^(?:TYPEOF\b)/i,/^(?:INT\b)/i,/^(?:FLOAT\b)/i,/^(?:DATE\b)/i,/^(?:VARCHAR\b)/i,/^(?:BOOLEAN\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:(@?(_)*[a-zA-Z][a-zA-Z0-9\_]*))/i,/^(?:(("((([^\n\"\\]|\\.))*)"|'((([^\n\"\\]|\\.))*)')))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.\.)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}