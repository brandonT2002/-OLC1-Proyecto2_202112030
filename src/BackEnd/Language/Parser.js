/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,24],$V2=[1,25],$V3=[1,26],$V4=[1,36],$V5=[1,37],$V6=[1,35],$V7=[1,28],$V8=[1,29],$V9=[1,30],$Va=[1,31],$Vb=[1,32],$Vc=[1,33],$Vd=[1,34],$Ve=[1,38],$Vf=[1,42],$Vg=[1,39],$Vh=[1,43],$Vi=[1,40],$Vj=[1,41],$Vk=[2,5,27,28,29,31,39,40,46,53,56,60,68,71,72,73,75,76,77,78,80,81,82,83],$Vl=[1,74],$Vm=[1,75],$Vn=[1,82],$Vo=[1,90],$Vp=[1,76],$Vq=[1,77],$Vr=[1,78],$Vs=[1,79],$Vt=[1,80],$Vu=[1,81],$Vv=[1,83],$Vw=[1,84],$Vx=[1,85],$Vy=[1,86],$Vz=[1,87],$VA=[1,88],$VB=[1,89],$VC=[1,91],$VD=[1,114],$VE=[1,113],$VF=[1,126],$VG=[1,123],$VH=[1,121],$VI=[1,122],$VJ=[1,124],$VK=[1,125],$VL=[1,127],$VM=[1,128],$VN=[1,129],$VO=[1,130],$VP=[1,131],$VQ=[1,132],$VR=[1,133],$VS=[8,33,35,37,42,43,45,51,67,74,77,85,101,102,103,104,105,106,107,108,109,110,111],$VT=[2,91],$VU=[8,33],$VV=[1,154],$VW=[8,33,37,42,51],$VX=[1,156],$VY=[1,158],$VZ=[1,159],$V_=[1,160],$V$=[1,161],$V01=[1,162],$V11=[8,37,51,67,77],$V21=[8,33,37,42,43,51,67,74,77,85,110,111],$V31=[1,198],$V41=[1,206],$V51=[2,33],$V61=[8,35,36,37,51,67,77],$V71=[8,33,35,37,42,43,51,67,74,77,85,101,102,105,106,107,108,109,110,111],$V81=[8,33,35,37,42,43,51,67,74,77,85,105,110,111],$V91=[8,33,35,37,42,43,51,67,74,77,85,105,106,107,108,109,110,111],$Va1=[1,231],$Vb1=[37,43],$Vc1=[37,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"CREATETABLE":7,"TK_semicolon":8,"ALTERTAB":9,"DROPTAB":10,"INSERTREG":11,"UPDATETAB":12,"TRUNCATETAB":13,"DELETETAB":14,"SELECT":15,"DECLAREID":16,"ASIGNID":17,"IFSTRUCT":18,"CASESTRUCT_S":19,"WHILESTRUCT":20,"FORSTRUCT":21,"FUNCDEC":22,"METODDEC":23,"ENCAP":24,"CALLFUNC":25,"PRINT":26,"RW_break":27,"RW_continue":28,"RW_return":29,"EXP":30,"RW_declare":31,"DECLIDS":32,"TK_id":33,"TYPE":34,"TK_equal":35,"RW_default":36,"TK_comma":37,"DECLID":38,"RW_set":39,"RW_select":40,"FIELDS":41,"RW_from":42,"RW_where":43,"LIST_IDS":44,"TK_mult":45,"RW_create":46,"RW_table":47,"TK_field":48,"TK_lpar":49,"ATTRIBUTES":50,"TK_rpar":51,"ATTRIBUTE":52,"RW_alter":53,"ACTION":54,"RW_add":55,"RW_drop":56,"RW_column":57,"RW_rename":58,"RW_to":59,"RW_insert":60,"RW_into":61,"LIST_ATTRIBS":62,"RW_values":63,"LIST_EXPS":64,"SELECTREG":65,"IDS":66,"RW_as":67,"RW_update":68,"VALUESTAB":69,"VALUETAB":70,"RW_truncate":71,"RW_delete":72,"RW_if":73,"RW_then":74,"RW_else":75,"RW_end":76,"RW_begin":77,"RW_case":78,"ENVCASE_S":79,"RW_when":80,"RW_print":81,"RW_while":82,"RW_for":83,"RW_in":84,"TK_dot":85,"RW_loop":86,"RW_function":87,"RW_returns":88,"RW_procedure":89,"ARITHMETICS":90,"RELATIONALS":91,"LOGICS":92,"CAST":93,"NATIVEFUC":94,"TK_varchar":95,"TK_int":96,"TK_double":97,"TK_date":98,"RW_true":99,"RW_false":100,"TK_plus":101,"TK_minus":102,"TK_div":103,"TK_mod":104,"TK_notequal":105,"TK_lessequal":106,"TK_greatequal":107,"TK_less":108,"TK_great":109,"RW_and":110,"RW_or":111,"RW_not":112,"RW_cast":113,"RW_lower":114,"RW_upper":115,"RW_round":116,"RW_len":117,"RW_typeof":118,"RW_int":119,"RW_double":120,"RW_date":121,"RW_varchar":122,"RW_boolean":123,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"TK_semicolon",27:"RW_break",28:"RW_continue",29:"RW_return",31:"RW_declare",33:"TK_id",35:"TK_equal",36:"RW_default",37:"TK_comma",39:"RW_set",40:"RW_select",42:"RW_from",43:"RW_where",45:"TK_mult",46:"RW_create",47:"RW_table",48:"TK_field",49:"TK_lpar",51:"TK_rpar",53:"RW_alter",55:"RW_add",56:"RW_drop",57:"RW_column",58:"RW_rename",59:"RW_to",60:"RW_insert",61:"RW_into",63:"RW_values",67:"RW_as",68:"RW_update",71:"RW_truncate",72:"RW_delete",73:"RW_if",74:"RW_then",75:"RW_else",76:"RW_end",77:"RW_begin",78:"RW_case",80:"RW_when",81:"RW_print",82:"RW_while",83:"RW_for",84:"RW_in",85:"TK_dot",86:"RW_loop",87:"RW_function",88:"RW_returns",89:"RW_procedure",95:"TK_varchar",96:"TK_int",97:"TK_double",98:"TK_date",99:"RW_true",100:"RW_false",101:"TK_plus",102:"TK_minus",103:"TK_div",104:"TK_mod",105:"TK_notequal",106:"TK_lessequal",107:"TK_greatequal",108:"TK_less",109:"TK_great",110:"RW_and",111:"RW_or",112:"RW_not",113:"RW_cast",114:"RW_lower",115:"RW_upper",116:"RW_round",117:"RW_len",118:"RW_typeof",119:"RW_int",120:"RW_double",121:"RW_date",122:"RW_varchar",123:"RW_boolean"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,3],[6,1],[16,2],[16,5],[16,5],[32,3],[32,1],[38,2],[17,4],[15,6],[15,4],[15,2],[41,1],[41,1],[7,6],[50,3],[50,1],[52,2],[9,4],[54,3],[54,3],[54,3],[54,5],[10,3],[11,10],[62,3],[62,1],[64,3],[64,1],[65,6],[65,4],[65,4],[44,3],[44,1],[66,3],[66,1],[12,8],[69,3],[69,1],[70,3],[13,3],[14,5],[18,8],[18,6],[18,5],[19,6],[19,4],[19,3],[79,5],[79,4],[79,2],[26,2],[20,3],[21,8],[22,9],[23,6],[23,5],[24,3],[25,5],[25,7],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,2],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[92,3],[92,3],[92,2],[93,6],[94,4],[94,4],[94,6],[94,4],[94,6],[94,4],[34,1],[34,1],[34,1],[34,1],[34,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
return []
break;
case 3: case 51: case 53: case 58:
this.$.push($$[$0])
break;
case 4: case 52: case 54: case 59:
this.$ = [$$[$0]]  
break;
case 5: case 7: case 8: case 10: case 13: case 14: case 15: case 16: case 17: case 18: case 21: case 23: case 99:
this.$ = $$[$0-1]
break;
case 24:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column)   
break;
case 25:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 27:
errors.push(new Error(this._$.first_line, this._$.first_column + 1, TypeError.SYNTAX, `No se esperaba «${yytext}»`))
break;
case 28:
this.$ = new InitID(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0][0], $$[$0][1], undefined)
break;
case 29: case 30:
this.$ = new InitID(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0-2], $$[$0])             
break;
case 31: case 41:
this.$[0].push($$[$0][0]); this.$[1].push($$[$0][1])
break;
case 32:
this.$ = [[$$[$0][0]], [$$[$0][1]]]             
break;
case 33: case 43:
this.$ = [$$[$0-1], $$[$0]]
break;
case 34:
this.$ = new AsignID(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0])
break;
case 40:
this.$ = new CreateTable(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1][0], $$[$0-1][1])
break;
case 42:
this.$ = [[$$[$0][0]], [$$[$0][1]]]                 
break;
case 49:
this.$ = new DropTable(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0])
break;
case 50:
this.$ = new InsertTable(_$[$0-9].first_line, _$[$0-9].first_column, $$[$0-7], $$[$0-5], $$[$0-1])
break;
case 60:
this.$ = [$$[$0-2], $$[$0]]
break;
case 61:
this.$ = [$$[$0], $$[$0]]
break;
case 66:
this.$ = new TruncateTable(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0])
break;
case 68:
this.$ = new If(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], new Block(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-4]), new Block(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-2]))
break;
case 69:
this.$ = new If(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], new Block(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-2]), undefined)
break;
case 70:
this.$ = new If(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], new Block(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]), undefined)
break;
case 71:
this.$ = new Case(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], $$[$0-3], undefined, $$[$0-1])
break;
case 72:
/*this.$ = new Case(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0-1], undefined)*/
break;
case 73:
/*this.$ = new Case(_$[$0-2].first_line, _$[$0-2].first_column, undefined, $$[$0-1], undefined)*/
break;
case 74:
this.$ = new When(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], new Block(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]))
break;
case 75:
this.$ = new When(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], new Block(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0]))
break;
case 76:
this.$ = new Block(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0])
break;
case 77:
this.$ = new Print(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0])
break;
case 78:
this.$ = new While(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], $$[$0])
break;
case 79:
this.$ = new For(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], $$[$0-4], $$[$0-2], $$[$0-1])
break;
case 83:
this.$ = new Block(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1])
break;
case 86: case 87: case 88: case 89: case 90:
this.$ = $$[$0]
break;
case 91:
this.$ = new AccessID(_$[$0].first_line, _$[$0].first_column, $$[$0])
break;
case 93:
this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.VARCHAR)
break;
case 94:
this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.INT)    
break;
case 95:
this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.DOUBLE) 
break;
case 96:
this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.DATE)   
break;
case 97: case 98:
this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.BOOLEAN)
break;
case 100: case 101: case 102: case 103: case 104:
this.$ = new Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 105:
this.$ = new Arithmetic(_$[$0-1].first_line, _$[$0-1].first_column, undefined, $$[$0-1], $$[$0])
break;
case 106: case 107: case 108: case 109: case 110: case 111:
this.$ = new Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 112: case 113:
this.$ = new Logic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 114:
this.$ = new Logic(_$[$0-1].first_line, _$[$0-1].first_column, undefined, $$[$0-1], $$[$0])
break;
case 115:
this.$ = new Cast(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1])
break;
case 116:
this.$ = new Lower(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1])
break;
case 117:
this.$ = new Upper(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1])
break;
case 118:
this.$ = new Round(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1])
break;
case 119:
this.$ = new Len(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1])
break;
case 120:
this.$ = new Truncate(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1])
break;
case 121:
this.$ = new TypeOf(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1])
break;
case 122:
this.$ = Type.INT    
break;
case 123:
this.$ = Type.DOUBLE 
break;
case 124:
this.$ = Type.DATE   
break;
case 125:
this.$ = Type.VARCHAR
break;
case 126:
this.$ = Type.BOOLEAN
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,28:$V2,29:$V3,31:$V4,39:$V5,40:$V6,46:$V7,53:$V8,56:$V9,60:$Va,68:$Vb,71:$Vc,72:$Vd,73:$Ve,77:$Vf,78:$Vg,81:$Vh,82:$Vi,83:$Vj},{1:[3]},{2:$V0,5:[1,44],6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,28:$V2,29:$V3,31:$V4,39:$V5,40:$V6,46:$V7,53:$V8,56:$V9,60:$Va,68:$Vb,71:$Vc,72:$Vd,73:$Ve,77:$Vf,78:$Vg,81:$Vh,82:$Vi,83:$Vj},{1:[2,2]},o($Vk,[2,4]),{8:[1,46]},{8:[1,47]},{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51]},{8:[1,52]},{8:[1,53],33:[1,54]},{8:[1,55]},{8:[1,56]},{8:[1,57]},{8:[1,58]},{8:[1,59]},{8:[1,60]},{8:[1,61]},{8:[1,62]},{8:[1,63]},{8:[1,64]},{8:[1,65]},{8:[1,66]},{8:[1,67]},{30:68,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vk,[2,27]),{47:[1,92],87:[1,93],89:[1,94]},{47:[1,95]},{47:[1,96]},{61:[1,97]},{33:[1,98]},{47:[1,99]},{42:[1,100]},{30:105,33:$Vl,41:101,44:102,45:[1,103],48:$Vm,49:$Vn,66:104,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{32:106,33:[1,107],38:108},{33:[1,109]},{30:110,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{33:[1,111],75:$VD,79:112,80:$VE},{30:115,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{33:[1,116]},{2:$V0,4:117,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,28:$V2,29:$V3,31:$V4,39:$V5,40:$V6,46:$V7,53:$V8,56:$V9,60:$Va,68:$Vb,71:$Vc,72:$Vd,73:$Ve,77:$Vf,78:$Vg,81:$Vh,82:$Vi,83:$Vj},{30:118,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{1:[2,1]},o($Vk,[2,3]),o($Vk,[2,5]),o($Vk,[2,6]),o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,11]),o($Vk,[2,12]),{49:[1,119]},o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,19]),o($Vk,[2,20]),o($Vk,[2,21]),o($Vk,[2,22]),o($Vk,[2,23]),o($Vk,[2,24]),o($Vk,[2,25]),{8:[1,120],35:$VF,45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},o($VS,[2,86]),o($VS,[2,87]),o($VS,[2,88]),o($VS,[2,89]),o($VS,[2,90]),o($VS,$VT),o($VS,[2,92]),o($VS,[2,93]),o($VS,[2,94]),o($VS,[2,95]),o($VS,[2,96]),o($VS,[2,97]),o($VS,[2,98]),{30:134,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:135,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:136,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{49:[1,137]},{49:[1,138]},{49:[1,139]},{49:[1,140]},{49:[1,141]},{49:[1,142]},{49:[1,143]},{48:[1,144]},{33:[1,145]},{33:[1,146]},{33:[1,147]},{48:[1,148]},{48:[1,149]},{39:[1,150]},{33:[1,151]},{33:[1,152]},{42:[1,153]},o($VU,[2,37],{37:$VV,42:[2,38]}),{42:[2,39]},o($VW,[2,59]),o($VW,[2,61],{35:$VF,45:$VG,67:[1,155],101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR}),{8:[2,28],37:$VX},{34:157,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01},o($V11,[2,32]),{35:[1,163]},{35:$VF,45:$VG,74:[1,164],77:[1,165],101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{75:$VD,79:166,80:$VE},{76:[1,167]},{30:168,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{2:$V0,4:169,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,28:$V2,29:$V3,31:$V4,39:$V5,40:$V6,46:$V7,53:$V8,56:$V9,60:$Va,68:$Vb,71:$Vc,72:$Vd,73:$Ve,77:$Vf,78:$Vg,81:$Vh,82:$Vi,83:$Vj},{24:170,35:$VF,45:$VG,77:$Vf,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{84:[1,171]},{2:$V0,6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,28:$V2,29:$V3,31:$V4,39:$V5,40:$V6,46:$V7,53:$V8,56:$V9,60:$Va,68:$Vb,71:$Vc,72:$Vd,73:$Ve,76:[1,172],77:$Vf,78:$Vg,81:$Vh,82:$Vi,83:$Vj},{8:[2,77],35:$VF,45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{30:105,33:$Vl,44:173,48:$Vm,49:$Vn,66:104,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vk,[2,26]),{30:174,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:175,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:176,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:177,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:178,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:179,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:180,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:181,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:182,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:183,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:184,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:185,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:186,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{35:$VF,45:$VG,51:[1,187],101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},o($VS,[2,105]),o($V21,[2,114],{35:$VF,45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP}),{30:188,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:189,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:190,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:191,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:192,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:193,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:194,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{49:[1,195]},{49:[1,196]},{32:197,33:$V31,38:108},{54:199,55:[1,200],56:[1,201],58:[1,202]},{8:[2,49]},{49:[1,203]},{33:$V41,69:204,70:205},{8:[2,66]},{43:[1,207]},{33:[1,208]},{30:105,33:$Vl,48:$Vm,49:$Vn,66:209,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{48:[1,210]},{33:$V31,38:211},o([8,37],$V51,{35:[1,212],36:[1,213]}),o($V61,[2,122]),o($V61,[2,123]),o($V61,[2,124]),o($V61,[2,125]),o($V61,[2,126]),{30:214,33:[1,215],48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{2:$V0,4:216,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,28:$V2,29:$V3,31:$V4,39:$V5,40:$V6,46:$V7,53:$V8,56:$V9,60:$Va,68:$Vb,71:$Vc,72:$Vd,73:$Ve,77:$Vf,78:$Vg,81:$Vh,82:$Vi,83:$Vj},{2:$V0,4:217,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,28:$V2,29:$V3,31:$V4,39:$V5,40:$V6,46:$V7,53:$V8,56:$V9,60:$Va,68:$Vb,71:$Vc,72:$Vd,73:$Ve,77:$Vf,78:$Vg,81:$Vh,82:$Vi,83:$Vj},{76:[1,218]},{8:[2,73]},{35:$VF,45:$VG,74:[1,219],101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{2:$V0,6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,28:$V2,29:$V3,31:$V4,39:$V5,40:$V6,46:$V7,53:$V8,56:$V9,60:$Va,68:$Vb,71:$Vc,72:$Vd,73:$Ve,76:[2,76],77:$Vf,78:$Vg,81:$Vh,82:$Vi,83:$Vj},{8:[2,78]},{30:220,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o([8,86],[2,83]),{37:$VV,51:[1,221]},o($V71,[2,100],{45:$VG,103:$VJ,104:$VK}),o($V71,[2,101],{45:$VG,103:$VJ,104:$VK}),o($VS,[2,102]),o($VS,[2,103]),o($VS,[2,104]),o($V81,[2,106],{45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,106:$VM,107:$VN,108:$VO,109:$VP}),o($V81,[2,107],{45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,106:$VM,107:$VN,108:$VO,109:$VP}),o($V91,[2,108],{45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK}),o($V91,[2,109],{45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK}),o($V91,[2,110],{45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK}),o($V91,[2,111],{45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK}),o($V21,[2,112],{35:$VF,45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP}),o([8,33,37,42,43,51,67,74,77,85,111],[2,113],{35:$VF,45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ}),o($VS,[2,99]),{35:$VF,45:$VG,67:[1,222],101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{35:$VF,45:$VG,51:[1,223],101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{35:$VF,45:$VG,51:[1,224],101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{35:$VF,37:[1,225],45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{35:$VF,45:$VG,51:[1,226],101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{35:$VF,37:[1,227],45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{35:$VF,45:$VG,51:[1,228],101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{48:$Va1,50:229,52:230},{32:232,33:$V31,38:108},{24:234,37:$VX,67:[1,233],77:$Vf},{34:235,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01},{8:[2,44]},{48:[1,236]},{57:[1,237]},{57:[1,239],59:[1,238]},{48:[1,241],62:240},{37:[1,243],43:[1,242]},o($Vb1,[2,64]),{35:[1,244]},{30:245,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VU,[2,36],{43:[1,246]}),o($VW,[2,58]),o($VW,[2,60]),o($V11,[2,31]),{30:247,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{30:248,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{8:[2,34],35:$VF,45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},o([8,35,45,101,102,103,104,105,106,107,108,109,110,111],$VT,{49:[1,249]}),{2:$V0,6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,28:$V2,29:$V3,31:$V4,39:$V5,40:$V6,46:$V7,53:$V8,56:$V9,60:$Va,68:$Vb,71:$Vc,72:$Vd,73:$Ve,75:[1,250],76:[1,251],77:$Vf,78:$Vg,81:$Vh,82:$Vi,83:$Vj},{2:$V0,6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,28:$V2,29:$V3,31:$V4,39:$V5,40:$V6,46:$V7,53:$V8,56:$V9,60:$Va,68:$Vb,71:$Vc,72:$Vd,73:$Ve,76:[1,252],77:$Vf,78:$Vg,81:$Vh,82:$Vi,83:$Vj},{8:[2,72],67:[1,253]},{2:$V0,4:254,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,28:$V2,29:$V3,31:$V4,39:$V5,40:$V6,46:$V7,53:$V8,56:$V9,60:$Va,68:$Vb,71:$Vc,72:$Vd,73:$Ve,77:$Vf,78:$Vg,81:$Vh,82:$Vi,83:$Vj},{35:$VF,45:$VG,85:[1,255],101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{8:[2,84]},{34:256,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01},o($VS,[2,116]),o($VS,[2,117]),{30:257,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VS,[2,119]),{30:258,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VS,[2,121]),{37:[1,260],51:[1,259]},o($Vc1,[2,42]),{34:261,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01},{37:$VX,51:[1,262]},{24:263,77:$Vf},{8:[2,82]},o($V11,$V51),{34:264,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01},{48:[1,265]},{48:[1,266]},{48:[1,267]},{37:[1,269],51:[1,268]},o($Vc1,[2,52]),{33:[1,270]},{33:$V41,70:271},{30:272,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{8:[2,67],35:$VF,45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{30:273,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{8:[2,29],35:$VF,45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{8:[2,30],35:$VF,45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{30:105,33:$Vl,44:274,48:$Vm,49:$Vn,66:104,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{2:$V0,4:275,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,28:$V2,29:$V3,31:$V4,39:$V5,40:$V6,46:$V7,53:$V8,56:$V9,60:$Va,68:$Vb,71:$Vc,72:$Vd,73:$Ve,77:$Vf,78:$Vg,81:$Vh,82:$Vi,83:$Vj},{73:[1,276]},{8:[2,70]},{48:[1,277]},{2:$V0,6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,28:$V2,29:$V3,31:$V4,39:$V5,40:$V6,46:$V7,53:$V8,56:$V9,60:$Va,68:$Vb,71:$Vc,72:$Vd,73:$Ve,75:$VD,76:[2,75],77:$Vf,78:$Vg,79:278,80:$VE,81:$Vh,82:$Vi,83:$Vj},{30:279,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{51:[1,280]},{35:$VF,45:$VG,51:[1,281],101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{35:$VF,45:$VG,51:[1,282],101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{8:[2,40]},{48:$Va1,52:283},o($Vc1,[2,43]),{88:[1,284]},{8:[2,81]},{8:[2,45]},{8:[2,46]},{8:[2,47]},{59:[1,285]},{63:[1,286]},{48:[1,287]},{35:[1,288]},o($Vb1,[2,63]),o($Vb1,[2,65],{35:$VF,45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR}),o($VU,[2,35],{35:$VF,45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR}),{37:$VV,51:[1,289]},{2:$V0,6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,28:$V2,29:$V3,31:$V4,39:$V5,40:$V6,46:$V7,53:$V8,56:$V9,60:$Va,68:$Vb,71:$Vc,72:$Vd,73:$Ve,76:[1,290],77:$Vf,78:$Vg,81:$Vh,82:$Vi,83:$Vj},{8:[2,69]},{8:[2,71]},{76:[2,74]},{24:291,35:$VF,45:$VG,77:$Vf,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},o($VS,[2,115]),o($VS,[2,118]),o($VS,[2,120]),o($Vc1,[2,41]),{34:292,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01},{48:[1,293]},{49:[1,294]},o($Vc1,[2,51]),{30:295,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{8:[2,85]},{73:[1,296]},{86:[1,297]},{24:298,77:$Vf},{8:[2,48]},{30:300,33:$Vl,48:$Vm,49:$Vn,64:299,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{8:[2,62],35:$VF,45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR},{8:[2,68]},{8:[2,79]},{8:[2,80]},{37:[1,302],51:[1,301]},o($Vc1,[2,54],{35:$VF,45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR}),{8:[2,50]},{30:303,33:$Vl,48:$Vm,49:$Vn,71:$Vo,90:69,91:70,92:71,93:72,94:73,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,102:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vc1,[2,53],{35:$VF,45:$VG,101:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,108:$VO,109:$VP,110:$VQ,111:$VR})],
defaultActions: {3:[2,2],44:[2,1],103:[2,39],148:[2,49],151:[2,66],167:[2,73],170:[2,78],199:[2,44],221:[2,84],234:[2,82],252:[2,70],259:[2,40],263:[2,81],264:[2,45],265:[2,46],266:[2,47],276:[2,69],277:[2,71],278:[2,74],289:[2,85],293:[2,48],296:[2,68],297:[2,79],298:[2,80],301:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    // imports
    let { errors } = require ('../Classes/Utils/Outs')
    const { Error } = require ('../Classes/Utils/Error')
    const { TypeError } = require ('../Classes/Utils/TypeError')

    // imports
    // Tipos
    const { Type } = require('../Classes/Utils/Type')
    // Instrucciones
    const { Print } = require('../Classes/Instructions/Print')
    const { InitID } = require('../Classes/Instructions/InitID')
    const { AsignID } = require('../Classes/Instructions/AsignID')
    const { If } = require('../Classes/Instructions/If')
    const { Block } = require('../Classes/Instructions/Block')
    const { Break } = require('../Classes/Instructions/Break')
    const { Continue } = require('../Classes/Instructions/Continue')
    const { While } = require('../Classes/Instructions/While')
    const { For } = require('../Classes/Instructions/For')
    const { When } = require('../Classes/Instructions/When')
    const { Case } = require('../Classes/Instructions/Case')
    const { CreateTable } = require('../Classes/Instructions/CreateTable')
    const { DropTable } = require('../Classes/Instructions/DropTable')
    const { TruncateTable } = require('../Classes/Instructions/TruncateTable')
    const { InsertTable } = require('../Classes/Instructions/InsertTable')
    // Expresiones
    const { Primitive } = require('../Classes/Expressions/Primitive')
    const { AccessID } = require('../Classes/Expressions/AccessID')
    const { Arithmetic } = require('../Classes/Expressions/Arithmetic')
    const { Relational } = require('../Classes/Expressions/Relational')
    const { Logic } = require('../Classes/Expressions/Logic')
    const { Cast } = require('../Classes/Expressions/Cast')
    const { TypeOf } = require('../Classes/Expressions/TypeOf')
    const { Lower } = require('../Classes/Expressions/Lower')
    const { Upper } = require('../Classes/Expressions/Upper')
    const { Round } = require('../Classes/Expressions/Round')
    const { Len } = require('../Classes/Expressions/Len')
    const { Truncate } = require('../Classes/Expressions/Truncate')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 77
break;
case 5:return 76
break;
case 6:return 40
break;
case 7:return 42
break;
case 8:return 43
break;
case 9:return 31
break;
case 10:return 36
break;
case 11:return 39
break;
case 12:return 46
break;
case 13:return 47
break;
case 14:return 53
break;
case 15:return 55
break;
case 16:return 56
break;
case 17:return 57
break;
case 18:return 58
break;
case 19:return 59
break;
case 20:return 60
break;
case 21:return 61
break;
case 22:return 63
break;
case 23:return 67
break;
case 24:return 68
break;
case 25:return 71
break;
case 26:return 72
break;
case 27:return 113
break;
case 28:return 74
break;
case 29:return 80
break;
case 30:return 73
break;
case 31:return 75
break;
case 32:return 78
break;
case 33:return 82
break;
case 34:return 83
break;
case 35:return 84
break;
case 36:return 86
break;
case 37:return 27
break;
case 38:return 28
break;
case 39:return 87
break;
case 40:return 88
break;
case 41:return 29
break;
case 42:return 89
break;
case 43:return 81
break;
case 44:return 114
break;
case 45:return 115
break;
case 46:return 116
break;
case 47:return 117
break;
case 48:return 71
break;
case 49:return 118
break;
case 50:return 119
break;
case 51:return 120
break;
case 52:return 121
break;
case 53:return 122
break;
case 54:return 123
break;
case 55:return 99
break;
case 56:return 100
break;
case 57:return 'RW_null'
break;
case 58:return 110
break;
case 59:return 111
break;
case 60:return 112
break;
case 61:return 33
break;
case 62:return 48
break;
case 63:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng - 2); return 95
break;
case 64:return 97
break;
case 65:return 96
break;
case 66:return 98
break;
case 67:return 49
break;
case 68:return 51
break;
case 69:return 8
break;
case 70:return 37
break;
case 71:return 85
break;
case 72:return 101
break;
case 73:return 102
break;
case 74:return 45
break;
case 75:return 103
break;
case 76:return 104
break;
case 77:return 35
break;
case 78:return 105
break;
case 79:return 106
break;
case 80:return 107
break;
case 81:return 108
break;
case 82:return 109
break;
case 83:errors.push(new Error(yy_.yylloc.first_line, yy_.yylloc.first_column + 1, TypeError.LEXICAL, `Caracter no reconocido. «${yy_.yytext}»`))
break;
case 84:return 5
break;
}
},
rules: [/^(?:\n)/i,/^(?:(--([^\r\n]*)?))/i,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/i,/^(?:([\s\r\t]+))/i,/^(?:BEGIN\b)/i,/^(?:END\b)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:SET\b)/i,/^(?:CREATE\b)/i,/^(?:TABLE\b)/i,/^(?:ALTER\b)/i,/^(?:ADD\b)/i,/^(?:DROP\b)/i,/^(?:COLUMN\b)/i,/^(?:RENAME\b)/i,/^(?:TO\b)/i,/^(?:INSERT\b)/i,/^(?:INTO\b)/i,/^(?:VALUES\b)/i,/^(?:AS\b)/i,/^(?:UPDATE\b)/i,/^(?:TRUNCATE\b)/i,/^(?:DELETE\b)/i,/^(?:CAST\b)/i,/^(?:THEN\b)/i,/^(?:WHEN\b)/i,/^(?:IF\b)/i,/^(?:ELSE\b)/i,/^(?:CASE\b)/i,/^(?:WHILE\b)/i,/^(?:FOR\b)/i,/^(?:IN\b)/i,/^(?:LOOP\b)/i,/^(?:BREAK\b)/i,/^(?:CONTINUE\b)/i,/^(?:FUNCTION\b)/i,/^(?:RETURNS\b)/i,/^(?:RETURN\b)/i,/^(?:PROCEDURE\b)/i,/^(?:PRINT\b)/i,/^(?:LOWER\b)/i,/^(?:UPPER\b)/i,/^(?:ROUND\b)/i,/^(?:LEN\b)/i,/^(?:TRUNCATE\b)/i,/^(?:TYPEOF\b)/i,/^(?:INT\b)/i,/^(?:DOUBLE\b)/i,/^(?:DATE\b)/i,/^(?:VARCHAR\b)/i,/^(?:BOOLEAN\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:(@(_)*[a-zA-Z][a-zA-Z0-9\_]*))/i,/^(?:((_)*[a-zA-Z][a-zA-Z0-9\_]*))/i,/^(?:("((([^\n\"\\]|\\.))*)"))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:('\d\d\d\d-\d\d-\d\d'))/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.\.)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}