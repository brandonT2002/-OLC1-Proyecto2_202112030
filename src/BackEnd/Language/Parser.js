/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[2,5,18,26,28,33,39,42,46,52,55,56],$Vc=[1,48],$Vd=[1,54],$Ve=[1,49],$Vf=[1,50],$Vg=[1,51],$Vh=[1,52],$Vi=[1,53],$Vj=[1,55],$Vk=[1,56],$Vl=[1,57],$Vm=[1,67],$Vn=[1,68],$Vo=[1,69],$Vp=[1,70],$Vq=[1,71],$Vr=[8,24],$Vs=[1,75],$Vt=[8,24,30,32,37],$Vu=[1,81],$Vv=[1,78],$Vw=[1,76],$Vx=[1,77],$Vy=[1,79],$Vz=[1,80],$VA=[1,82],$VB=[1,83],$VC=[1,84],$VD=[1,85],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[8,24,27,30,31,32,37,51,66,67,68,69,70,71,72,73,74,75,76],$VI=[2,20],$VJ=[8,22,24,37],$VK=[8,24,30,31,32,37,75,76],$VL=[1,130],$VM=[8,24,27,30,31,32,37,66,67,70,71,72,73,74,75,76],$VN=[8,24,27,30,31,32,37,70,75,76],$VO=[8,24,27,30,31,32,37,70,71,72,73,74,75,76],$VP=[1,138],$VQ=[24,31],$VR=[24,37];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"DECLAREID":7,"TK_semicolon":8,"ASIGNID":9,"SELECT":10,"CREATETABLE":11,"ALTERTAB":12,"DROPTAB":13,"INSERTREG":14,"UPDATETAB":15,"TRUNCATETAB":16,"DELETETAB":17,"RW_declare":18,"DECLIDS":19,"TK_id":20,"TYPE":21,"RW_default":22,"EXP":23,"TK_comma":24,"DECLID":25,"RW_set":26,"TK_equal":27,"RW_select":28,"LIST_EXPS":29,"RW_from":30,"RW_where":31,"RW_as":32,"RW_create":33,"RW_table":34,"TK_lpar":35,"ATTRIBUTES":36,"TK_rpar":37,"ATTRIBUTE":38,"RW_alter":39,"ACTION":40,"RW_add":41,"RW_drop":42,"RW_column":43,"RW_rename":44,"RW_to":45,"RW_insert":46,"RW_into":47,"LIST_IDS":48,"RW_values":49,"SELECTREG":50,"TK_mult":51,"RW_update":52,"VALUESTAB":53,"VALUETAB":54,"RW_truncate":55,"RW_delete":56,"ARITHMETICS":57,"RELATIONALS":58,"LOGICS":59,"CAST":60,"TK_str":61,"TK_int":62,"TK_double":63,"RW_true":64,"RW_false":65,"TK_plus":66,"TK_minus":67,"TK_div":68,"TK_mod":69,"TK_notequal":70,"TK_lessequal":71,"TK_greatequal":72,"TK_less":73,"TK_great":74,"RW_and":75,"RW_or":76,"RW_not":77,"RW_cast":78,"RW_int":79,"RW_float":80,"RW_date":81,"RW_varchar":82,"RW_boolean":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"TK_semicolon",18:"RW_declare",20:"TK_id",22:"RW_default",24:"TK_comma",26:"RW_set",27:"TK_equal",28:"RW_select",30:"RW_from",31:"RW_where",32:"RW_as",33:"RW_create",34:"RW_table",35:"TK_lpar",37:"TK_rpar",39:"RW_alter",41:"RW_add",42:"RW_drop",43:"RW_column",44:"RW_rename",45:"RW_to",46:"RW_insert",47:"RW_into",49:"RW_values",51:"TK_mult",52:"RW_update",55:"RW_truncate",56:"RW_delete",61:"TK_str",62:"TK_int",63:"TK_double",64:"RW_true",65:"RW_false",66:"TK_plus",67:"TK_minus",68:"TK_div",69:"TK_mod",70:"TK_notequal",71:"TK_lessequal",72:"TK_greatequal",73:"TK_less",74:"TK_great",75:"RW_and",76:"RW_or",77:"RW_not",78:"RW_cast",79:"RW_int",80:"RW_float",81:"RW_date",82:"RW_varchar",83:"RW_boolean"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[7,2],[7,5],[19,3],[19,1],[25,2],[9,4],[10,6],[10,4],[10,4],[10,2],[11,6],[36,3],[36,1],[38,2],[12,4],[40,3],[40,3],[40,3],[40,5],[13,3],[14,10],[50,6],[50,4],[50,4],[15,8],[53,3],[53,1],[54,3],[16,3],[17,7],[48,3],[48,1],[29,3],[29,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,2],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[59,3],[59,3],[59,2],[60,6],[21,1],[21,1],[21,1],[21,1],[21,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 15:
console.log(`Error SINT√ÅCTICO: ${yytext}. ${this._$.first_line}:${this._$.first_column + 1}`)
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,26:$V2,28:$V3,33:$V4,39:$V5,42:$V6,46:$V7,52:$V8,55:$V9,56:$Va},{1:[3]},{2:$V0,5:[1,26],6:27,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V1,26:$V2,28:$V3,33:$V4,39:$V5,42:$V6,46:$V7,52:$V8,55:$V9,56:$Va},{1:[2,2]},o($Vb,[2,4]),{8:[1,28]},{8:[1,29]},{8:[1,30]},{8:[1,31]},{8:[1,32]},{8:[1,33]},{8:[1,34]},{8:[1,35]},{8:[1,36]},{8:[1,37]},o($Vb,[2,15]),{19:38,20:[1,39],25:40},{20:[1,41]},{20:$Vc,23:43,29:42,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{34:[1,58]},{34:[1,59]},{34:[1,60]},{47:[1,61]},{20:[1,62]},{34:[1,63]},{30:[1,64]},{1:[2,1]},o($Vb,[2,3]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),o($Vb,[2,14]),{8:[2,16],24:[1,65]},{21:66,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq},o($Vr,[2,19]),{27:[1,72]},{8:[2,25],24:$Vs,30:[1,73],32:[1,74]},o($Vt,[2,49],{27:$Vu,51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG}),o($VH,[2,50]),o($VH,[2,51]),o($VH,[2,52]),o($VH,[2,53]),o($VH,[2,54]),o($VH,[2,55]),o($VH,[2,56]),o($VH,[2,57]),o($VH,[2,58]),o($VH,[2,59]),{20:$Vc,23:89,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{20:$Vc,23:90,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{20:$Vc,23:91,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{35:[1,92]},{20:[1,93]},{20:[1,94]},{20:[1,95]},{20:[1,96]},{26:[1,97]},{20:[1,98]},{20:[1,99]},{20:[1,101],25:100},o($Vr,$VI,{22:[1,102]}),o($VJ,[2,77]),o($VJ,[2,78]),o($VJ,[2,79]),o($VJ,[2,80]),o($VJ,[2,81]),{20:$Vc,23:103,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{20:[1,104]},{20:[1,105]},{20:$Vc,23:106,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{20:$Vc,23:107,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{20:$Vc,23:108,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{20:$Vc,23:109,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{20:$Vc,23:110,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{20:$Vc,23:111,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{20:$Vc,23:112,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{20:$Vc,23:113,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{20:$Vc,23:114,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{20:$Vc,23:115,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{20:$Vc,23:116,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{20:$Vc,23:117,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{20:$Vc,23:118,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{20:$Vc,23:119,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{27:$Vu,37:[1,120],51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},o($VH,[2,66]),o($VK,[2,75],{27:$Vu,51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE}),{20:$Vc,23:121,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{35:[1,122]},{40:123,41:[1,124],42:[1,125],44:[1,126]},{8:[2,35]},{35:[1,127]},{20:$VL,53:128,54:129},{8:[2,44]},{31:[1,131]},o($Vr,[2,18]),{21:132,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq},{20:$Vc,23:133,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{8:[2,21],27:$Vu,51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},{8:[2,23],31:[1,134]},{8:[2,24]},o($Vt,[2,48],{27:$Vu,51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG}),o($VM,[2,61],{51:$Vv,68:$Vy,69:$Vz}),o($VM,[2,62],{51:$Vv,68:$Vy,69:$Vz}),o($VH,[2,63]),o($VH,[2,64]),o($VH,[2,65]),o($VN,[2,67],{51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,71:$VB,72:$VC,73:$VD,74:$VE}),o($VN,[2,68],{51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,71:$VB,72:$VC,73:$VD,74:$VE}),o($VO,[2,69],{51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($VO,[2,70],{51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($VO,[2,71],{51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($VO,[2,72],{51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($VK,[2,73],{27:$Vu,51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE}),o([8,24,30,31,32,37,76],[2,74],{27:$Vu,51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF}),o($VH,[2,60]),{27:$Vu,32:[1,135],51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},{20:$VP,36:136,38:137},{8:[2,30]},{20:[1,139]},{43:[1,140]},{43:[1,142],45:[1,141]},{20:[1,144],48:143},{24:[1,146],31:[1,145]},o($VQ,[2,42]),{27:[1,147]},{20:[1,148]},o($Vr,$VI),{8:[2,17],27:$Vu,51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},{20:$Vc,23:149,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{21:150,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq},{24:[1,152],37:[1,151]},o($VR,[2,28]),{21:153,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq},{21:154,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq},{20:[1,155]},{20:[1,156]},{20:[1,157]},{24:[1,159],37:[1,158]},o($VR,[2,47]),{20:[1,160]},{20:$VL,54:161},{20:$Vc,23:162,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{27:[1,163]},{8:[2,22],27:$Vu,51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},{37:[1,164]},{8:[2,26]},{20:$VP,38:165},o($VR,[2,29]),{8:[2,31]},{8:[2,32]},{8:[2,33]},{45:[1,166]},{49:[1,167]},{20:[1,168]},{27:[1,169]},o($VQ,[2,41]),o($VQ,[2,43],{27:$Vu,51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG}),{20:$Vc,23:170,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},o($VH,[2,76]),o($VR,[2,27]),{20:[1,171]},{35:[1,172]},o($VR,[2,46]),{20:$Vc,23:173,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{8:[2,45],27:$Vu,51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},{8:[2,34]},{20:$Vc,23:43,29:174,35:$Vd,57:44,58:45,59:46,60:47,61:$Ve,62:$Vf,63:$Vg,64:$Vh,65:$Vi,67:$Vj,77:$Vk,78:$Vl},{8:[2,40],27:$Vu,51:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG},{24:$Vs,37:[1,175]},{8:[2,36]}],
defaultActions: {3:[2,2],26:[2,1],95:[2,35],98:[2,44],105:[2,24],123:[2,30],151:[2,26],154:[2,31],155:[2,32],156:[2,33],171:[2,34],175:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    // imports

    // imports
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 'RW_begin'
break;
case 5:return 'RW_end'
break;
case 6:return 28
break;
case 7:return 30
break;
case 8:return 31
break;
case 9:return 18
break;
case 10:return 22
break;
case 11:return 26
break;
case 12:return 33
break;
case 13:return 34
break;
case 14:return 39
break;
case 15:return 41
break;
case 16:return 42
break;
case 17:return 43
break;
case 18:return 44
break;
case 19:return 45
break;
case 20:return 46
break;
case 21:return 47
break;
case 22:return 49
break;
case 23:return 32
break;
case 24:return 52
break;
case 25:return 55
break;
case 26:return 56
break;
case 27:return 78
break;
case 28:return 'RW_if'
break;
case 29:return 'RW_else'
break;
case 30:return 'RW_case'
break;
case 31:return 'RW_while'
break;
case 32:return 'RW_for'
break;
case 33:return 'RW_in'
break;
case 34:return 'RW_break'
break;
case 35:return 'RW_continue'
break;
case 36:return 'RW_function'
break;
case 37:return 'RW_return'
break;
case 38:return 'RW_procedure'
break;
case 39:return 'RW_print'
break;
case 40:return 'RW_lower'
break;
case 41:return 'RW_upper'
break;
case 42:return 'RW_round'
break;
case 43:return 'RW_len'
break;
case 44:return 55
break;
case 45:return 'RW_typeof'
break;
case 46:return 79
break;
case 47:return 80
break;
case 48:return 81
break;
case 49:return 82
break;
case 50:return 83
break;
case 51:return 64
break;
case 52:return 65
break;
case 53:return 'RW_null'
break;
case 54:return 20
break;
case 55:return 61
break;
case 56:return 63
break;
case 57:return 62
break;
case 58:return 75
break;
case 59:return 76
break;
case 60:return 77
break;
case 61:return 35
break;
case 62:return 37
break;
case 63:return 8
break;
case 64:return 24
break;
case 65:return 66
break;
case 66:return 67
break;
case 67:return 51
break;
case 68:return 68
break;
case 69:return 69
break;
case 70:return 27
break;
case 71:return 70
break;
case 72:return 71
break;
case 73:return 72
break;
case 74:return 73
break;
case 75:return 74
break;
case 76:console.log(`Error Lexico: ${yy_.yytext}`)
break;
case 77:return 5
break;
}
},
rules: [/^(?:\n)/i,/^(?:(--([^\r\n]*)?))/i,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/i,/^(?:([ \r\t]+))/i,/^(?:BEGIN\b)/i,/^(?:END\b)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:SET\b)/i,/^(?:CREATE\b)/i,/^(?:TABLE\b)/i,/^(?:ALTER\b)/i,/^(?:ADD\b)/i,/^(?:DROP\b)/i,/^(?:COLUMN\b)/i,/^(?:RENAME\b)/i,/^(?:TO\b)/i,/^(?:INSERT\b)/i,/^(?:INTO\b)/i,/^(?:VALUES\b)/i,/^(?:AS\b)/i,/^(?:UPDATE\b)/i,/^(?:TRUNCATE\b)/i,/^(?:DELETE\b)/i,/^(?:CAST\b)/i,/^(?:IF\b)/i,/^(?:ELSE\b)/i,/^(?:CASE\b)/i,/^(?:WHILE\b)/i,/^(?:FOR\b)/i,/^(?:IN\b)/i,/^(?:BREAK\b)/i,/^(?:CONTINUE\b)/i,/^(?:FUNCTION\b)/i,/^(?:RETURN\b)/i,/^(?:PROCEDURE\b)/i,/^(?:PRINT\b)/i,/^(?:LOWER\b)/i,/^(?:UPPER\b)/i,/^(?:ROUND\b)/i,/^(?:LEN\b)/i,/^(?:TRUNCATE\b)/i,/^(?:TYPEOF\b)/i,/^(?:INT\b)/i,/^(?:FLOAT\b)/i,/^(?:DATE\b)/i,/^(?:VARCHAR\b)/i,/^(?:BOOLEAN\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:(@?(_)*[a-zA-Z][a-zA-Z0-9\_]*))/i,/^(?:(("((([^\n\"\\]|\\.))*)"|'((([^\n\"\\]|\\.))*)')))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}