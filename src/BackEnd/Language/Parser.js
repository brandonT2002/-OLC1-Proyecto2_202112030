/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,23],$V2=[1,24],$V3=[1,25],$V4=[1,35],$V5=[1,36],$V6=[1,34],$V7=[1,41],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,37],$Vg=[1,42],$Vh=[1,38],$Vi=[1,43],$Vj=[1,39],$Vk=[1,40],$Vl=[2,5,26,27,28,30,38,39,42,47,53,56,60,66,69,70,71,73,74,75,76,83,84,85],$Vm=[1,74],$Vn=[1,75],$Vo=[1,82],$Vp=[1,90],$Vq=[1,76],$Vr=[1,77],$Vs=[1,78],$Vt=[1,79],$Vu=[1,80],$Vv=[1,81],$Vw=[1,83],$Vx=[1,84],$Vy=[1,85],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,91],$VE=[1,116],$VF=[1,117],$VG=[1,120],$VH=[1,130],$VI=[1,127],$VJ=[1,125],$VK=[1,126],$VL=[1,128],$VM=[1,129],$VN=[1,131],$VO=[1,132],$VP=[1,133],$VQ=[1,134],$VR=[1,135],$VS=[1,136],$VT=[1,137],$VU=[8,34,36,41,43,45,51,65,72,73,74,75,82,87,105,106,107,108,109,110,111,112,113,114,115],$VV=[8,36,41],$VW=[1,162],$VX=[1,163],$VY=[1,164],$VZ=[1,165],$V_=[1,166],$V$=[8,36],$V01=[73,74,82],$V11=[8,88],$V21=[8,36,41,43,51,65,72,73,74,75,82,87,114,115],$V31=[1,209],$V41=[1,217],$V51=[2,33],$V61=[8,34,35,36,51,65,75],$V71=[36,51],$V81=[8,34,36,41,43,51,65,72,73,74,75,82,87,105,106,109,110,111,112,113,114,115],$V91=[8,34,36,41,43,51,65,72,73,74,75,82,87,109,114,115],$Va1=[8,34,36,41,43,51,65,72,73,74,75,82,87,109,110,111,112,113,114,115],$Vb1=[1,244],$Vc1=[1,249],$Vd1=[36,51,65,75],$Ve1=[36,43];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"CREATETABLE":7,"TK_semicolon":8,"ALTERTAB":9,"DROPTAB":10,"INSERTREG":11,"UPDATETAB":12,"TRUNCATETAB":13,"DELETETAB":14,"SELECT":15,"DECLAREID":16,"ASIGNID":17,"IFSTRUCT":18,"CASESTRUCT_S":19,"WHILESTRUCT":20,"FORSTRUCT":21,"FUNCDEC":22,"CALLFUNC":23,"ENCAP":24,"PRINT":25,"RW_break":26,"RW_continue":27,"RW_return":28,"EXP":29,"RW_declare":30,"DECLIDS":31,"TK_id":32,"TYPE":33,"TK_equal":34,"RW_default":35,"TK_comma":36,"DECLID":37,"RW_set":38,"RW_select":39,"FIELDS":40,"RW_from":41,"TK_field":42,"RW_where":43,"LIST_IDS":44,"TK_mult":45,"IDS":46,"RW_create":47,"RW_table":48,"TK_lpar":49,"ATTRIBUTES":50,"TK_rpar":51,"ATTRIBUTE":52,"RW_alter":53,"ACTION":54,"RW_add":55,"RW_drop":56,"RW_column":57,"RW_rename":58,"RW_to":59,"RW_insert":60,"RW_into":61,"LIST_ATTRIBS":62,"RW_values":63,"LIST_EXPS":64,"RW_as":65,"RW_update":66,"VALUESTAB":67,"VALUETAB":68,"RW_truncate":69,"RW_delete":70,"RW_if":71,"RW_then":72,"RW_else":73,"RW_end":74,"RW_begin":75,"RW_case":76,"WHENSELSE":77,"TK_varchar":78,"WHENS":79,"ELSE":80,"WHEN":81,"RW_when":82,"RW_print":83,"RW_while":84,"RW_for":85,"RW_in":86,"TK_dot":87,"RW_loop":88,"RW_function":89,"PARAMS":90,"RW_returns":91,"RW_procedure":92,"PARAM":93,"ARGS":94,"ARITHMETICS":95,"RELATIONALS":96,"LOGICS":97,"CAST":98,"NATIVEFUC":99,"TK_int":100,"TK_double":101,"TK_date":102,"RW_true":103,"RW_false":104,"TK_plus":105,"TK_minus":106,"TK_div":107,"TK_mod":108,"TK_notequal":109,"TK_lessequal":110,"TK_greatequal":111,"TK_less":112,"TK_great":113,"RW_and":114,"RW_or":115,"RW_not":116,"RW_cast":117,"RW_lower":118,"RW_upper":119,"RW_round":120,"RW_len":121,"RW_typeof":122,"RW_int":123,"RW_double":124,"RW_date":125,"RW_varchar":126,"RW_boolean":127,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"TK_semicolon",26:"RW_break",27:"RW_continue",28:"RW_return",30:"RW_declare",32:"TK_id",34:"TK_equal",35:"RW_default",36:"TK_comma",38:"RW_set",39:"RW_select",41:"RW_from",42:"TK_field",43:"RW_where",45:"TK_mult",47:"RW_create",48:"RW_table",49:"TK_lpar",51:"TK_rpar",53:"RW_alter",55:"RW_add",56:"RW_drop",57:"RW_column",58:"RW_rename",59:"RW_to",60:"RW_insert",61:"RW_into",63:"RW_values",65:"RW_as",66:"RW_update",69:"RW_truncate",70:"RW_delete",71:"RW_if",72:"RW_then",73:"RW_else",74:"RW_end",75:"RW_begin",76:"RW_case",78:"TK_varchar",82:"RW_when",83:"RW_print",84:"RW_while",85:"RW_for",86:"RW_in",87:"TK_dot",88:"RW_loop",89:"RW_function",91:"RW_returns",92:"RW_procedure",100:"TK_int",101:"TK_double",102:"TK_date",103:"RW_true",104:"RW_false",105:"TK_plus",106:"TK_minus",107:"TK_div",108:"TK_mod",109:"TK_notequal",110:"TK_lessequal",111:"TK_greatequal",112:"TK_less",113:"TK_great",114:"RW_and",115:"RW_or",116:"RW_not",117:"RW_cast",118:"RW_lower",119:"RW_upper",120:"RW_round",121:"RW_len",122:"RW_typeof",123:"RW_int",124:"RW_double",125:"RW_date",126:"RW_varchar",127:"RW_boolean"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,3],[6,2],[6,1],[16,2],[16,5],[16,5],[31,3],[31,1],[37,2],[17,4],[15,6],[15,4],[15,2],[40,1],[40,1],[44,3],[44,1],[7,6],[50,3],[50,1],[52,2],[9,4],[54,3],[54,3],[54,3],[54,5],[10,3],[11,10],[62,3],[62,1],[64,3],[64,1],[46,3],[46,1],[12,8],[67,3],[67,1],[68,3],[13,3],[14,5],[18,8],[18,6],[18,5],[19,6],[19,6],[19,4],[19,5],[19,5],[19,3],[77,2],[77,1],[77,1],[79,2],[79,1],[81,4],[80,2],[25,2],[20,3],[21,8],[22,9],[22,8],[22,6],[22,5],[22,5],[22,4],[90,3],[90,1],[93,2],[24,3],[24,2],[23,4],[23,3],[94,3],[94,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,3],[95,3],[95,3],[95,3],[95,3],[95,3],[95,2],[96,3],[96,3],[96,3],[96,3],[96,3],[96,3],[97,3],[97,3],[97,2],[98,6],[99,4],[99,4],[99,6],[99,4],[99,6],[99,4],[33,1],[33,1],[33,1],[33,1],[33,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
return []
break;
case 3: case 40: case 53: case 55: case 77: case 90: case 97:
this.$.push($$[$0])
break;
case 4: case 41: case 54: case 56: case 78: case 91: case 98:
this.$ = [$$[$0]]  
break;
case 5: case 6: case 7: case 8: case 10: case 11: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 113:
this.$ = $$[$0-1]
break;
case 23:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column)            
break;
case 24:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column)         
break;
case 25:
this.$ = new Return(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1])       
break;
case 26:
this.$ = new Return(_$[$0-1].first_line, _$[$0-1].first_column, undefined)
break;
case 27:
errors.push(new Error(this._$.first_line, this._$.first_column + 1, TypeError.SYNTAX, `No se esperaba «${yytext}»`))
break;
case 28:
this.$ = new InitID(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0][0], $$[$0][1], undefined)
break;
case 29: case 30:
this.$ = new InitID(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0-2], $$[$0])             
break;
case 31: case 43:
this.$[0].push($$[$0][0]); this.$[1].push($$[$0][1])
break;
case 32:
this.$ = [[$$[$0][0]], [$$[$0][1]]]             
break;
case 33: case 45: case 74:
this.$ = [$$[$0-1], $$[$0]]
break;
case 34:
this.$ = new AsignID(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0])
break;
case 42:
this.$ = new CreateTable(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1][0], $$[$0-1][1])
break;
case 44:
this.$ = [[$$[$0][0]], [$$[$0][1]]]                 
break;
case 46:
this.$ = new AlterTable(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], $$[$0][0], $$[$0][1], $$[$0][2], $$[$0][3])
break;
case 47:
this.$ = [$$[$0-2], $$[$0-1], undefined, $$[$0]]            
break;
case 48:
this.$ = [$$[$0-2], $$[$0], undefined, undefined]     
break;
case 49:
this.$ = [$$[$0-2] + $$[$0-1], $$[$0], undefined, undefined]
break;
case 50:
this.$ = [$$[$0-4] + $$[$0-3], $$[$0-2], $$[$0], undefined]       
break;
case 51:
this.$ = new DropTable(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0])
break;
case 52:
this.$ = new InsertTable(_$[$0-9].first_line, _$[$0-9].first_column, $$[$0-7], $$[$0-5], $$[$0-1])
break;
case 57:
this.$ = [$$[$0-2], $$[$0]]
break;
case 58:
this.$ = [$$[$0], $$[$0]]
break;
case 63:
this.$ = new TruncateTable(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0])
break;
case 64:
this.$ = new DeleteTable(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0])
break;
case 65:
this.$ = new If(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], new Block(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-4]), new Block(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-2]))
break;
case 66:
this.$ = new If(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], new Block(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-2]), undefined)
break;
case 67:
this.$ = new If(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], new Block(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]), undefined)
break;
case 68: case 69:
this.$ = new Case(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], $$[$0-3][0], $$[$0-3][1], $$[$0])       
break;
case 70:
this.$ = new Case(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0-1][0], $$[$0-1][1], undefined)
break;
case 71: case 72:
this.$ = new Case(_$[$0-4].first_line, _$[$0-4].first_column, undefined, $$[$0-3][0], $$[$0-3][1], $$[$0])       
break;
case 73:
this.$ = new Case(_$[$0-2].first_line, _$[$0-2].first_column, undefined, $$[$0-1][0], $$[$0-1][1], undefined)
break;
case 75:
this.$ = [$$[$0], undefined]
break;
case 76:
this.$ = [undefined, $$[$0]]
break;
case 79:
this.$ = new When(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0])
break;
case 80: case 99: case 100: case 101: case 102: case 103: case 104:
this.$ = $$[$0]
break;
case 81:
this.$ = new Print(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0])
break;
case 82:
this.$ = new While(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], $$[$0])
break;
case 83:
this.$ = new For(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], $$[$0-4], $$[$0-2], $$[$0-1])
break;
case 84:
this.$ = new Function(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-4], $$[$0], $$[$0-1])
break;
case 85:
this.$ = new Function(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], [], $$[$0], $$[$0-1])
break;
case 86:
this.$ = new Function(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-2], $$[$0], Type.NULL)
break;
case 87:
this.$ = new Function(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], [], $$[$0], Type.NULL)
break;
case 88:
this.$ = new Function(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0-1], $$[$0], Type.NULL)
break;
case 89:
this.$ = new Function(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], [], $$[$0], Type.NULL)
break;
case 92:
this.$ = new Parameter(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$0])
break;
case 93:
this.$ = new Block(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1])
break;
case 94:
this.$ = new Block(_$[$0-1].first_line, _$[$0-1].first_column, [])
break;
case 95:
this.$ = new CallFunction(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], $$[$0-1])
break;
case 96:
this.$ = new CallFunction(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], [])
break;
case 105:
this.$ = new AccessID(_$[$0].first_line, _$[$0].first_column, $$[$0])
break;
case 106:
this.$ = new Field(_$[$0].first_line, _$[$0].first_column, $$[$0])   
break;
case 107:
this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.VARCHAR)
break;
case 108:
this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.INT)    
break;
case 109:
this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.DOUBLE) 
break;
case 110:
this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.DATE)   
break;
case 111: case 112:
this.$ = new Primitive(_$[$0].first_line, _$[$0].first_column, $$[$0], Type.BOOLEAN)
break;
case 114: case 115: case 116: case 117: case 118:
this.$ = new Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 119:
this.$ = new Arithmetic(_$[$0-1].first_line, _$[$0-1].first_column, undefined, $$[$0-1], $$[$0])
break;
case 120: case 121: case 122: case 123: case 124: case 125:
this.$ = new Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 126: case 127:
this.$ = new Logic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 128:
this.$ = new Logic(_$[$0-1].first_line, _$[$0-1].first_column, undefined, $$[$0-1], $$[$0])
break;
case 129:
this.$ = new Cast(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1])
break;
case 130:
this.$ = new Lower(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1])       
break;
case 131:
this.$ = new Upper(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1])       
break;
case 132:
this.$ = new Round(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1])   
break;
case 133:
this.$ = new Len(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1])         
break;
case 134:
this.$ = new Truncate(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1])
break;
case 135:
this.$ = new TypeOf(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1])      
break;
case 136:
this.$ = Type.INT    
break;
case 137:
this.$ = Type.DOUBLE 
break;
case 138:
this.$ = Type.DATE   
break;
case 139:
this.$ = Type.VARCHAR
break;
case 140:
this.$ = Type.BOOLEAN
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V1,27:$V2,28:$V3,30:$V4,38:$V5,39:$V6,42:$V7,47:$V8,53:$V9,56:$Va,60:$Vb,66:$Vc,69:$Vd,70:$Ve,71:$Vf,75:$Vg,76:$Vh,83:$Vi,84:$Vj,85:$Vk},{1:[3]},{2:$V0,5:[1,44],6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V1,27:$V2,28:$V3,30:$V4,38:$V5,39:$V6,42:$V7,47:$V8,53:$V9,56:$Va,60:$Vb,66:$Vc,69:$Vd,70:$Ve,71:$Vf,75:$Vg,76:$Vh,83:$Vi,84:$Vj,85:$Vk},{1:[2,2]},o($Vl,[2,4]),{8:[1,46]},{8:[1,47]},{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51]},{8:[1,52]},{8:[1,53]},{8:[1,54]},{8:[1,55]},{8:[1,56]},{8:[1,57]},{8:[1,58]},{8:[1,59]},{8:[1,60]},{8:[1,61]},{8:[1,62]},{8:[1,63]},{8:[1,64]},{8:[1,65]},{8:[1,67],23:73,29:66,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},o($Vl,[2,27]),{48:[1,92],89:[1,93],92:[1,94]},{48:[1,95]},{48:[1,96]},{61:[1,97]},{32:[1,98]},{48:[1,99]},{41:[1,100]},{23:73,29:105,32:$Vm,40:101,42:$Vn,44:102,45:[1,103],46:104,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{31:106,32:[1,107],37:108},{32:[1,109]},{23:73,29:110,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:111,32:$Vm,42:$Vn,49:$Vo,69:$Vp,73:$VE,77:112,78:$Vq,79:113,80:114,81:115,82:$VF,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:118,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{32:[1,119]},{49:$VG},{2:$V0,4:121,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V1,27:$V2,28:$V3,30:$V4,38:$V5,39:$V6,42:$V7,47:$V8,53:$V9,56:$Va,60:$Vb,66:$Vc,69:$Vd,70:$Ve,71:$Vf,74:[1,122],75:$Vg,76:$Vh,83:$Vi,84:$Vj,85:$Vk},{23:73,29:123,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{1:[2,1]},o($Vl,[2,3]),o($Vl,[2,5]),o($Vl,[2,6]),o($Vl,[2,7]),o($Vl,[2,8]),o($Vl,[2,9]),o($Vl,[2,10]),o($Vl,[2,11]),o($Vl,[2,12]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),o($Vl,[2,17]),o($Vl,[2,18]),o($Vl,[2,19]),o($Vl,[2,20]),o($Vl,[2,21]),o($Vl,[2,22]),o($Vl,[2,23]),o($Vl,[2,24]),{8:[1,124],34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},o($Vl,[2,26]),o($VU,[2,99]),o($VU,[2,100]),o($VU,[2,101]),o($VU,[2,102]),o($VU,[2,103]),o($VU,[2,104]),o($VU,[2,105]),o($VU,[2,106],{49:$VG}),o($VU,[2,107]),o($VU,[2,108]),o($VU,[2,109]),o($VU,[2,110]),o($VU,[2,111]),o($VU,[2,112]),{23:73,29:138,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:139,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:140,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{49:[1,141]},{49:[1,142]},{49:[1,143]},{49:[1,144]},{49:[1,145]},{49:[1,146]},{49:[1,147]},{42:[1,148]},{42:[1,149]},{42:[1,150]},{42:[1,151]},{42:[1,152]},{42:[1,153]},{38:[1,154]},{32:[1,155]},{42:[1,156]},{41:[1,157]},{8:[2,37],36:[1,158],41:[2,38]},{41:[2,39]},o($VV,[2,41]),o($VV,[2,58],{34:$VH,45:$VI,65:[1,159],105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT}),{8:[2,28],36:[1,160]},{33:161,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},o($V$,[2,32]),{34:[1,167]},{34:$VH,45:$VI,72:[1,168],75:[1,169],105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{34:$VH,45:$VI,73:$VE,77:170,79:113,80:114,81:115,82:$VF,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{74:[1,171]},{73:$VE,74:[2,75],80:172,81:173,82:$VF},{74:[2,76]},o($V01,[2,78]),{23:73,29:174,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:175,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{24:176,34:$VH,45:$VI,75:$Vg,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{86:[1,177]},{23:73,29:180,32:$Vm,42:$Vn,49:$Vo,51:[1,179],69:$Vp,78:$Vq,94:178,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{2:$V0,6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V1,27:$V2,28:$V3,30:$V4,38:$V5,39:$V6,42:$V7,47:$V8,53:$V9,56:$Va,60:$Vb,66:$Vc,69:$Vd,70:$Ve,71:$Vf,74:[1,181],75:$Vg,76:$Vh,83:$Vi,84:$Vj,85:$Vk},o($V11,[2,94]),{8:[2,81],34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},o($Vl,[2,25]),{23:73,29:182,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:183,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:184,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:185,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:186,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:187,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:188,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:189,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:190,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:191,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:192,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:193,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:194,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{34:$VH,45:$VI,51:[1,195],105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},o($VU,[2,119]),o($V21,[2,128],{34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR}),{23:73,29:196,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:197,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:198,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:199,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:200,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:201,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:202,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{49:[1,203]},{49:[1,204]},{24:207,32:$V31,65:[1,206],75:$Vg,90:205,93:208},{54:210,55:[1,211],56:[1,212],58:[1,213]},{8:[2,51]},{49:[1,214]},{32:$V41,67:215,68:216},{8:[2,63]},{43:[1,218]},{42:[1,219]},{23:73,29:105,32:$Vm,42:$Vn,46:220,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{42:[1,221]},{32:[1,223],37:222},o($V$,$V51,{34:[1,224],35:[1,225]}),o($V61,[2,136]),o($V61,[2,137]),o($V61,[2,138]),o($V61,[2,139]),o($V61,[2,140]),{23:73,29:226,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{2:$V0,4:227,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V1,27:$V2,28:$V3,30:$V4,38:$V5,39:$V6,42:$V7,47:$V8,53:$V9,56:$Va,60:$Vb,66:$Vc,69:$Vd,70:$Ve,71:$Vf,75:$Vg,76:$Vh,83:$Vi,84:$Vj,85:$Vk},{2:$V0,4:228,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V1,27:$V2,28:$V3,30:$V4,38:$V5,39:$V6,42:$V7,47:$V8,53:$V9,56:$Va,60:$Vb,66:$Vc,69:$Vd,70:$Ve,71:$Vf,75:$Vg,76:$Vh,83:$Vi,84:$Vj,85:$Vk},{74:[1,229]},{8:[2,73],65:[1,230]},{74:[2,74]},o($V01,[2,77]),{34:$VH,45:$VI,74:[2,80],105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{34:$VH,45:$VI,72:[1,231],105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{8:[2,82]},{23:73,29:232,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{36:[1,234],51:[1,233]},o($VU,[2,96]),o($V71,[2,98],{34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT}),o($V11,[2,93]),o($V81,[2,114],{45:$VI,107:$VL,108:$VM}),o($V81,[2,115],{45:$VI,107:$VL,108:$VM}),o($VU,[2,116]),o($VU,[2,117]),o($VU,[2,118]),o($V91,[2,120],{45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VO,111:$VP,112:$VQ,113:$VR}),o($V91,[2,121],{45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,110:$VO,111:$VP,112:$VQ,113:$VR}),o($Va1,[2,122],{45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM}),o($Va1,[2,123],{45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM}),o($Va1,[2,124],{45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM}),o($Va1,[2,125],{45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM}),o($V21,[2,126],{34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR}),o([8,36,41,43,51,65,72,73,74,75,82,87,115],[2,127],{34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS}),o($VU,[2,113]),{34:$VH,45:$VI,65:[1,235],105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{34:$VH,45:$VI,51:[1,236],105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{34:$VH,45:$VI,51:[1,237],105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{34:$VH,36:[1,238],45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{34:$VH,45:$VI,51:[1,239],105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{34:$VH,36:[1,240],45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{34:$VH,45:$VI,51:[1,241],105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{42:$Vb1,50:242,52:243},{32:$V31,51:[1,246],90:245,93:208},{24:248,36:$Vc1,65:[1,247],75:$Vg},{24:250,75:$Vg},{8:[2,89]},o($Vd1,[2,91]),{33:251,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{8:[2,46]},{42:[1,252]},{57:[1,253]},{57:[1,255],59:[1,254]},{42:[1,257],62:256},{36:[1,259],43:[1,258]},o($Ve1,[2,61]),{34:[1,260]},{23:73,29:261,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{8:[2,36],43:[1,262]},o($VV,[2,40]),o($VV,[2,57]),o($V$,[2,31]),{33:263,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{23:73,29:264,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{23:73,29:265,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{8:[2,34],34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{2:$V0,6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V1,27:$V2,28:$V3,30:$V4,38:$V5,39:$V6,42:$V7,47:$V8,53:$V9,56:$Va,60:$Vb,66:$Vc,69:$Vd,70:$Ve,71:$Vf,73:[1,266],74:[1,267],75:$Vg,76:$Vh,83:$Vi,84:$Vj,85:$Vk},{2:$V0,6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V1,27:$V2,28:$V3,30:$V4,38:$V5,39:$V6,42:$V7,47:$V8,53:$V9,56:$Va,60:$Vb,66:$Vc,69:$Vd,70:$Ve,71:$Vf,74:[1,268],75:$Vg,76:$Vh,83:$Vi,84:$Vj,85:$Vk},{8:[2,70],65:[1,269]},{42:[1,270],78:[1,271]},{23:73,29:272,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{34:$VH,45:$VI,87:[1,273],105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},o($VU,[2,95]),{23:73,29:274,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{33:275,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},o($VU,[2,130]),o($VU,[2,131]),{23:73,29:276,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},o($VU,[2,133]),{23:73,29:277,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},o($VU,[2,135]),{36:[1,279],51:[1,278]},o($V71,[2,44]),{33:280,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{36:$Vc1,51:[1,281]},{91:[1,282]},{24:283,75:$Vg},{8:[2,88]},{32:$V31,93:284},{8:[2,87]},o($Vd1,[2,92]),{33:285,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{42:[1,286]},{42:[1,287]},{42:[1,288]},{36:[1,290],51:[1,289]},o($V71,[2,54]),{32:[1,291]},{32:$V41,68:292},{23:73,29:293,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{8:[2,64],34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{23:73,29:294,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},o($V$,$V51),{8:[2,29],34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{8:[2,30],34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{2:$V0,4:295,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V1,27:$V2,28:$V3,30:$V4,38:$V5,39:$V6,42:$V7,47:$V8,53:$V9,56:$Va,60:$Vb,66:$Vc,69:$Vd,70:$Ve,71:$Vf,75:$Vg,76:$Vh,83:$Vi,84:$Vj,85:$Vk},{71:[1,296]},{8:[2,67]},{42:[1,297],78:[1,298]},{8:[2,71]},{8:[2,72]},o($V01,[2,79],{34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT}),{23:73,29:299,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},o($V71,[2,97],{34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT}),{51:[1,300]},{34:$VH,45:$VI,51:[1,301],105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{34:$VH,45:$VI,51:[1,302],105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{8:[2,42]},{42:$Vb1,52:303},o($V71,[2,45]),{91:[1,304]},{33:305,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{8:[2,86]},o($Vd1,[2,90]),{8:[2,47]},{8:[2,48]},{8:[2,49]},{59:[1,306]},{63:[1,307]},{42:[1,308]},{34:[1,309]},o($Ve1,[2,60]),o($Ve1,[2,62],{34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT}),{8:[2,35],34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{2:$V0,6:45,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:$V1,27:$V2,28:$V3,30:$V4,38:$V5,39:$V6,42:$V7,47:$V8,53:$V9,56:$Va,60:$Vb,66:$Vc,69:$Vd,70:$Ve,71:$Vf,74:[1,310],75:$Vg,76:$Vh,83:$Vi,84:$Vj,85:$Vk},{8:[2,66]},{8:[2,68]},{8:[2,69]},{24:311,34:$VH,45:$VI,75:$Vg,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},o($VU,[2,129]),o($VU,[2,132]),o($VU,[2,134]),o($V71,[2,43]),{33:312,123:$VW,124:$VX,125:$VY,126:$VZ,127:$V_},{24:313,75:$Vg},{42:[1,314]},{49:[1,315]},o($V71,[2,53]),{23:73,29:316,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{71:[1,317]},{88:[1,318]},{24:319,75:$Vg},{8:[2,85]},{8:[2,50]},{23:73,29:321,32:$Vm,42:$Vn,49:$Vo,64:320,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},{8:[2,59],34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT},{8:[2,65]},{8:[2,83]},{8:[2,84]},{36:[1,323],51:[1,322]},o($V71,[2,56],{34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT}),{8:[2,52]},{23:73,29:324,32:$Vm,42:$Vn,49:$Vo,69:$Vp,78:$Vq,95:68,96:69,97:70,98:71,99:72,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,106:$Vw,116:$Vx,117:$Vy,118:$Vz,119:$VA,120:$VB,121:$VC,122:$VD},o($V71,[2,55],{34:$VH,45:$VI,105:$VJ,106:$VK,107:$VL,108:$VM,109:$VN,110:$VO,111:$VP,112:$VQ,113:$VR,114:$VS,115:$VT})],
defaultActions: {3:[2,2],44:[2,1],103:[2,39],114:[2,76],152:[2,51],155:[2,63],172:[2,74],176:[2,82],207:[2,89],210:[2,46],248:[2,88],250:[2,87],268:[2,67],270:[2,71],271:[2,72],278:[2,42],283:[2,86],285:[2,47],286:[2,48],287:[2,49],296:[2,66],297:[2,68],298:[2,69],313:[2,85],314:[2,50],317:[2,65],318:[2,83],319:[2,84],322:[2,52]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    // imports
    let { errors } = require ('../Classes/Utils/Outs')
    const { Error } = require ('../Classes/Utils/Error')
    const { TypeError } = require ('../Classes/Utils/TypeError')

    // imports
    // Tipos
    const { Type } = require('../Classes/Utils/Type')
    // Instrucciones
    const { Print } = require('../Classes/Instructions/Print')
    const { InitID } = require('../Classes/Instructions/InitID')
    const { AsignID } = require('../Classes/Instructions/AsignID')
    const { If } = require('../Classes/Instructions/If')
    const { Block } = require('../Classes/Instructions/Block')
    const { Break } = require('../Classes/Instructions/Break')
    const { Continue } = require('../Classes/Instructions/Continue')
    const { While } = require('../Classes/Instructions/While')
    const { For } = require('../Classes/Instructions/For')
    const { When } = require('../Classes/Instructions/When')
    const { Case } = require('../Classes/Instructions/Case')
    const { CreateTable } = require('../Classes/Instructions/CreateTable')
    const { DropTable } = require('../Classes/Instructions/DropTable')
    const { TruncateTable } = require('../Classes/Instructions/TruncateTable')
    const { InsertTable } = require('../Classes/Instructions/InsertTable')
    const { Function } = require('../Classes/Instructions/Function')
    const { AlterTable } = require('../Classes/Instructions/AlterTable')
    const { DeleteTable } = require('../Classes/Instructions/DeleteTable')
    // Expresiones
    const { Primitive } = require('../Classes/Expressions/Primitive')
    const { AccessID } = require('../Classes/Expressions/AccessID')
    const { Field } = require('../Classes/Expressions/Field')
    const { Arithmetic } = require('../Classes/Expressions/Arithmetic')
    const { Relational } = require('../Classes/Expressions/Relational')
    const { Logic } = require('../Classes/Expressions/Logic')
    const { Cast } = require('../Classes/Expressions/Cast')
    const { TypeOf } = require('../Classes/Expressions/TypeOf')
    const { Lower } = require('../Classes/Expressions/Lower')
    const { Upper } = require('../Classes/Expressions/Upper')
    const { Round } = require('../Classes/Expressions/Round')
    const { Len } = require('../Classes/Expressions/Len')
    const { Truncate } = require('../Classes/Expressions/Truncate')
    const { Parameter } = require('../Classes/Expressions/Parameter')
    const { CallFunction } = require('../Classes/Expressions/CallFunction')
    const { Return } = require('../Classes/Expressions/Return')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 75
break;
case 5:return 74
break;
case 6:return 39
break;
case 7:return 41
break;
case 8:return 43
break;
case 9:return 30
break;
case 10:return 35
break;
case 11:return 38
break;
case 12:return 47
break;
case 13:return 48
break;
case 14:return 53
break;
case 15:return 55
break;
case 16:return 56
break;
case 17:return 57
break;
case 18:return 58
break;
case 19:return 59
break;
case 20:return 60
break;
case 21:return 61
break;
case 22:return 63
break;
case 23:return 65
break;
case 24:return 66
break;
case 25:return 69
break;
case 26:return 70
break;
case 27:return 117
break;
case 28:return 72
break;
case 29:return 82
break;
case 30:return 71
break;
case 31:return 73
break;
case 32:return 76
break;
case 33:return 84
break;
case 34:return 85
break;
case 35:return 86
break;
case 36:return 88
break;
case 37:return 26
break;
case 38:return 27
break;
case 39:return 89
break;
case 40:return 91
break;
case 41:return 28
break;
case 42:return 92
break;
case 43:return 83
break;
case 44:return 118
break;
case 45:return 119
break;
case 46:return 120
break;
case 47:return 121
break;
case 48:return 69
break;
case 49:return 122
break;
case 50:return 123
break;
case 51:return 124
break;
case 52:return 125
break;
case 53:return 126
break;
case 54:return 127
break;
case 55:return 103
break;
case 56:return 104
break;
case 57:return 'RW_null'
break;
case 58:return 114
break;
case 59:return 115
break;
case 60:return 116
break;
case 61:return 32
break;
case 62:return 42
break;
case 63:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng - 2); return 102
break;
case 64:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng - 2); return 78
break;
case 65:return 101
break;
case 66:return 100
break;
case 67:return 49
break;
case 68:return 51
break;
case 69:return 8
break;
case 70:return 36
break;
case 71:return 87
break;
case 72:return 105
break;
case 73:return 106
break;
case 74:return 45
break;
case 75:return 107
break;
case 76:return 108
break;
case 77:return 34
break;
case 78:return 109
break;
case 79:return 110
break;
case 80:return 111
break;
case 81:return 112
break;
case 82:return 113
break;
case 83:errors.push(new Error(yy_.yylloc.first_line, yy_.yylloc.first_column + 1, TypeError.LEXICAL, `Caracter no reconocido. «${yy_.yytext}»`))
break;
case 84:return 5
break;
}
},
rules: [/^(?:\n)/i,/^(?:(--([^\r\n]*)?))/i,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/i,/^(?:([\s\r\t]+))/i,/^(?:BEGIN\b)/i,/^(?:END\b)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:SET\b)/i,/^(?:CREATE\b)/i,/^(?:TABLE\b)/i,/^(?:ALTER\b)/i,/^(?:ADD\b)/i,/^(?:DROP\b)/i,/^(?:COLUMN\b)/i,/^(?:RENAME\b)/i,/^(?:TO\b)/i,/^(?:INSERT\b)/i,/^(?:INTO\b)/i,/^(?:VALUES\b)/i,/^(?:AS\b)/i,/^(?:UPDATE\b)/i,/^(?:TRUNCATE\b)/i,/^(?:DELETE\b)/i,/^(?:CAST\b)/i,/^(?:THEN\b)/i,/^(?:WHEN\b)/i,/^(?:IF\b)/i,/^(?:ELSE\b)/i,/^(?:CASE\b)/i,/^(?:WHILE\b)/i,/^(?:FOR\b)/i,/^(?:IN\b)/i,/^(?:LOOP\b)/i,/^(?:BREAK\b)/i,/^(?:CONTINUE\b)/i,/^(?:FUNCTION\b)/i,/^(?:RETURNS\b)/i,/^(?:RETURN\b)/i,/^(?:PROCEDURE\b)/i,/^(?:PRINT\b)/i,/^(?:LOWER\b)/i,/^(?:UPPER\b)/i,/^(?:ROUND\b)/i,/^(?:LEN\b)/i,/^(?:TRUNCATE\b)/i,/^(?:TYPEOF\b)/i,/^(?:INT\b)/i,/^(?:DOUBLE\b)/i,/^(?:DATE\b)/i,/^(?:VARCHAR\b)/i,/^(?:BOOLEAN\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:(@(_)*[a-zA-Z][a-zA-Z0-9\_]*))/i,/^(?:((_)*[a-zA-Z][a-zA-Z0-9\_]*))/i,/^(?:("\d\d\/\d\d\/\d\d\d\d"))/i,/^(?:("((([^\n\"\\]|\\.))*)"))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.\.)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}